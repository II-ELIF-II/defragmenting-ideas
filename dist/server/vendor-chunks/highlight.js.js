"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/highlight.js";
exports.ids = ["vendor-chunks/highlight.js"];
exports.modules = {

/***/ "(ssr)/./node_modules/highlight.js/lib/core.js":
/*!***********************************************!*\
  !*** ./node_modules/highlight.js/lib/core.js ***!
  \***********************************************/
/***/ ((module) => {

eval("/* eslint-disable no-multi-assign */ \nfunction deepFreeze(obj) {\n    if (obj instanceof Map) {\n        obj.clear = obj.delete = obj.set = function() {\n            throw new Error(\"map is read-only\");\n        };\n    } else if (obj instanceof Set) {\n        obj.add = obj.clear = obj.delete = function() {\n            throw new Error(\"set is read-only\");\n        };\n    }\n    // Freeze self\n    Object.freeze(obj);\n    Object.getOwnPropertyNames(obj).forEach((name)=>{\n        const prop = obj[name];\n        const type = typeof prop;\n        // Freeze prop if it is an object or function and also not already frozen\n        if ((type === \"object\" || type === \"function\") && !Object.isFrozen(prop)) {\n            deepFreeze(prop);\n        }\n    });\n    return obj;\n}\n/** @typedef {import('highlight.js').CallbackResponse} CallbackResponse */ /** @typedef {import('highlight.js').CompiledMode} CompiledMode */ /** @implements CallbackResponse */ class Response {\n    /**\n   * @param {CompiledMode} mode\n   */ constructor(mode){\n        // eslint-disable-next-line no-undefined\n        if (mode.data === undefined) mode.data = {};\n        this.data = mode.data;\n        this.isMatchIgnored = false;\n    }\n    ignoreMatch() {\n        this.isMatchIgnored = true;\n    }\n}\n/**\n * @param {string} value\n * @returns {string}\n */ function escapeHTML(value) {\n    return value.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#x27;\");\n}\n/**\n * performs a shallow merge of multiple objects into one\n *\n * @template T\n * @param {T} original\n * @param {Record<string,any>[]} objects\n * @returns {T} a single new object\n */ function inherit$1(original, ...objects) {\n    /** @type Record<string,any> */ const result = Object.create(null);\n    for(const key in original){\n        result[key] = original[key];\n    }\n    objects.forEach(function(obj) {\n        for(const key in obj){\n            result[key] = obj[key];\n        }\n    });\n    return /** @type {T} */ result;\n}\n/**\n * @typedef {object} Renderer\n * @property {(text: string) => void} addText\n * @property {(node: Node) => void} openNode\n * @property {(node: Node) => void} closeNode\n * @property {() => string} value\n */ /** @typedef {{scope?: string, language?: string, sublanguage?: boolean}} Node */ /** @typedef {{walk: (r: Renderer) => void}} Tree */ /** */ const SPAN_CLOSE = \"</span>\";\n/**\n * Determines if a node needs to be wrapped in <span>\n *\n * @param {Node} node */ const emitsWrappingTags = (node)=>{\n    // rarely we can have a sublanguage where language is undefined\n    // TODO: track down why\n    return !!node.scope;\n};\n/**\n *\n * @param {string} name\n * @param {{prefix:string}} options\n */ const scopeToCSSClass = (name, { prefix })=>{\n    // sub-language\n    if (name.startsWith(\"language:\")) {\n        return name.replace(\"language:\", \"language-\");\n    }\n    // tiered scope: comment.line\n    if (name.includes(\".\")) {\n        const pieces = name.split(\".\");\n        return [\n            `${prefix}${pieces.shift()}`,\n            ...pieces.map((x, i)=>`${x}${\"_\".repeat(i + 1)}`)\n        ].join(\" \");\n    }\n    // simple scope\n    return `${prefix}${name}`;\n};\n/** @type {Renderer} */ class HTMLRenderer {\n    /**\n   * Creates a new HTMLRenderer\n   *\n   * @param {Tree} parseTree - the parse tree (must support `walk` API)\n   * @param {{classPrefix: string}} options\n   */ constructor(parseTree, options){\n        this.buffer = \"\";\n        this.classPrefix = options.classPrefix;\n        parseTree.walk(this);\n    }\n    /**\n   * Adds texts to the output stream\n   *\n   * @param {string} text */ addText(text) {\n        this.buffer += escapeHTML(text);\n    }\n    /**\n   * Adds a node open to the output stream (if needed)\n   *\n   * @param {Node} node */ openNode(node) {\n        if (!emitsWrappingTags(node)) return;\n        const className = scopeToCSSClass(node.scope, {\n            prefix: this.classPrefix\n        });\n        this.span(className);\n    }\n    /**\n   * Adds a node close to the output stream (if needed)\n   *\n   * @param {Node} node */ closeNode(node) {\n        if (!emitsWrappingTags(node)) return;\n        this.buffer += SPAN_CLOSE;\n    }\n    /**\n   * returns the accumulated buffer\n  */ value() {\n        return this.buffer;\n    }\n    // helpers\n    /**\n   * Builds a span element\n   *\n   * @param {string} className */ span(className) {\n        this.buffer += `<span class=\"${className}\">`;\n    }\n}\n/** @typedef {{scope?: string, language?: string, children: Node[]} | string} Node */ /** @typedef {{scope?: string, language?: string, children: Node[]} } DataNode */ /** @typedef {import('highlight.js').Emitter} Emitter */ /**  */ /** @returns {DataNode} */ const newNode = (opts = {})=>{\n    /** @type DataNode */ const result = {\n        children: []\n    };\n    Object.assign(result, opts);\n    return result;\n};\nclass TokenTree {\n    constructor(){\n        /** @type DataNode */ this.rootNode = newNode();\n        this.stack = [\n            this.rootNode\n        ];\n    }\n    get top() {\n        return this.stack[this.stack.length - 1];\n    }\n    get root() {\n        return this.rootNode;\n    }\n    /** @param {Node} node */ add(node) {\n        this.top.children.push(node);\n    }\n    /** @param {string} scope */ openNode(scope) {\n        /** @type Node */ const node = newNode({\n            scope\n        });\n        this.add(node);\n        this.stack.push(node);\n    }\n    closeNode() {\n        if (this.stack.length > 1) {\n            return this.stack.pop();\n        }\n        // eslint-disable-next-line no-undefined\n        return undefined;\n    }\n    closeAllNodes() {\n        while(this.closeNode());\n    }\n    toJSON() {\n        return JSON.stringify(this.rootNode, null, 4);\n    }\n    /**\n   * @typedef { import(\"./html_renderer\").Renderer } Renderer\n   * @param {Renderer} builder\n   */ walk(builder) {\n        // this does not\n        return this.constructor._walk(builder, this.rootNode);\n    // this works\n    // return TokenTree._walk(builder, this.rootNode);\n    }\n    /**\n   * @param {Renderer} builder\n   * @param {Node} node\n   */ static _walk(builder, node) {\n        if (typeof node === \"string\") {\n            builder.addText(node);\n        } else if (node.children) {\n            builder.openNode(node);\n            node.children.forEach((child)=>this._walk(builder, child));\n            builder.closeNode(node);\n        }\n        return builder;\n    }\n    /**\n   * @param {Node} node\n   */ static _collapse(node) {\n        if (typeof node === \"string\") return;\n        if (!node.children) return;\n        if (node.children.every((el)=>typeof el === \"string\")) {\n            // node.text = node.children.join(\"\");\n            // delete node.children;\n            node.children = [\n                node.children.join(\"\")\n            ];\n        } else {\n            node.children.forEach((child)=>{\n                TokenTree._collapse(child);\n            });\n        }\n    }\n}\n/**\n  Currently this is all private API, but this is the minimal API necessary\n  that an Emitter must implement to fully support the parser.\n\n  Minimal interface:\n\n  - addText(text)\n  - __addSublanguage(emitter, subLanguageName)\n  - startScope(scope)\n  - endScope()\n  - finalize()\n  - toHTML()\n\n*/ /**\n * @implements {Emitter}\n */ class TokenTreeEmitter extends TokenTree {\n    /**\n   * @param {*} options\n   */ constructor(options){\n        super();\n        this.options = options;\n    }\n    /**\n   * @param {string} text\n   */ addText(text) {\n        if (text === \"\") {\n            return;\n        }\n        this.add(text);\n    }\n    /** @param {string} scope */ startScope(scope) {\n        this.openNode(scope);\n    }\n    endScope() {\n        this.closeNode();\n    }\n    /**\n   * @param {Emitter & {root: DataNode}} emitter\n   * @param {string} name\n   */ __addSublanguage(emitter, name) {\n        /** @type DataNode */ const node = emitter.root;\n        if (name) node.scope = `language:${name}`;\n        this.add(node);\n    }\n    toHTML() {\n        const renderer = new HTMLRenderer(this, this.options);\n        return renderer.value();\n    }\n    finalize() {\n        this.closeAllNodes();\n        return true;\n    }\n}\n/**\n * @param {string} value\n * @returns {RegExp}\n * */ /**\n * @param {RegExp | string } re\n * @returns {string}\n */ function source(re) {\n    if (!re) return null;\n    if (typeof re === \"string\") return re;\n    return re.source;\n}\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */ function lookahead(re) {\n    return concat(\"(?=\", re, \")\");\n}\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */ function anyNumberOfTimes(re) {\n    return concat(\"(?:\", re, \")*\");\n}\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */ function optional(re) {\n    return concat(\"(?:\", re, \")?\");\n}\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */ function concat(...args) {\n    const joined = args.map((x)=>source(x)).join(\"\");\n    return joined;\n}\n/**\n * @param { Array<string | RegExp | Object> } args\n * @returns {object}\n */ function stripOptionsFromArgs(args) {\n    const opts = args[args.length - 1];\n    if (typeof opts === \"object\" && opts.constructor === Object) {\n        args.splice(args.length - 1, 1);\n        return opts;\n    } else {\n        return {};\n    }\n}\n/** @typedef { {capture?: boolean} } RegexEitherOptions */ /**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] | [...(RegExp | string)[], RegexEitherOptions]} args\n * @returns {string}\n */ function either(...args) {\n    /** @type { object & {capture?: boolean} }  */ const opts = stripOptionsFromArgs(args);\n    const joined = \"(\" + (opts.capture ? \"\" : \"?:\") + args.map((x)=>source(x)).join(\"|\") + \")\";\n    return joined;\n}\n/**\n * @param {RegExp | string} re\n * @returns {number}\n */ function countMatchGroups(re) {\n    return new RegExp(re.toString() + \"|\").exec(\"\").length - 1;\n}\n/**\n * Does lexeme start with a regular expression match at the beginning\n * @param {RegExp} re\n * @param {string} lexeme\n */ function startsWith(re, lexeme) {\n    const match = re && re.exec(lexeme);\n    return match && match.index === 0;\n}\n// BACKREF_RE matches an open parenthesis or backreference. To avoid\n// an incorrect parse, it additionally matches the following:\n// - [...] elements, where the meaning of parentheses and escapes change\n// - other escape sequences, so we do not misparse escape sequences as\n//   interesting elements\n// - non-matching or lookahead parentheses, which do not capture. These\n//   follow the '(' with a '?'.\nconst BACKREF_RE = /\\[(?:[^\\\\\\]]|\\\\.)*\\]|\\(\\??|\\\\([1-9][0-9]*)|\\\\./;\n// **INTERNAL** Not intended for outside usage\n// join logically computes regexps.join(separator), but fixes the\n// backreferences so they continue to match.\n// it also places each individual regular expression into it's own\n// match group, keeping track of the sequencing of those match groups\n// is currently an exercise for the caller. :-)\n/**\n * @param {(string | RegExp)[]} regexps\n * @param {{joinWith: string}} opts\n * @returns {string}\n */ function _rewriteBackreferences(regexps, { joinWith }) {\n    let numCaptures = 0;\n    return regexps.map((regex)=>{\n        numCaptures += 1;\n        const offset = numCaptures;\n        let re = source(regex);\n        let out = \"\";\n        while(re.length > 0){\n            const match = BACKREF_RE.exec(re);\n            if (!match) {\n                out += re;\n                break;\n            }\n            out += re.substring(0, match.index);\n            re = re.substring(match.index + match[0].length);\n            if (match[0][0] === \"\\\\\" && match[1]) {\n                // Adjust the backreference.\n                out += \"\\\\\" + String(Number(match[1]) + offset);\n            } else {\n                out += match[0];\n                if (match[0] === \"(\") {\n                    numCaptures++;\n                }\n            }\n        }\n        return out;\n    }).map((re)=>`(${re})`).join(joinWith);\n}\n/** @typedef {import('highlight.js').Mode} Mode */ /** @typedef {import('highlight.js').ModeCallback} ModeCallback */ // Common regexps\nconst MATCH_NOTHING_RE = /\\b\\B/;\nconst IDENT_RE = \"[a-zA-Z]\\\\w*\";\nconst UNDERSCORE_IDENT_RE = \"[a-zA-Z_]\\\\w*\";\nconst NUMBER_RE = \"\\\\b\\\\d+(\\\\.\\\\d+)?\";\nconst C_NUMBER_RE = \"(-?)(\\\\b0[xX][a-fA-F0-9]+|(\\\\b\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)([eE][-+]?\\\\d+)?)\"; // 0x..., 0..., decimal, float\nconst BINARY_NUMBER_RE = \"\\\\b(0b[01]+)\"; // 0b...\nconst RE_STARTERS_RE = \"!|!=|!==|%|%=|&|&&|&=|\\\\*|\\\\*=|\\\\+|\\\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\\\?|\\\\[|\\\\{|\\\\(|\\\\^|\\\\^=|\\\\||\\\\|=|\\\\|\\\\||~\";\n/**\n* @param { Partial<Mode> & {binary?: string | RegExp} } opts\n*/ const SHEBANG = (opts = {})=>{\n    const beginShebang = /^#![ ]*\\//;\n    if (opts.binary) {\n        opts.begin = concat(beginShebang, /.*\\b/, opts.binary, /\\b.*/);\n    }\n    return inherit$1({\n        scope: \"meta\",\n        begin: beginShebang,\n        end: /$/,\n        relevance: 0,\n        /** @type {ModeCallback} */ \"on:begin\": (m, resp)=>{\n            if (m.index !== 0) resp.ignoreMatch();\n        }\n    }, opts);\n};\n// Common modes\nconst BACKSLASH_ESCAPE = {\n    begin: \"\\\\\\\\[\\\\s\\\\S]\",\n    relevance: 0\n};\nconst APOS_STRING_MODE = {\n    scope: \"string\",\n    begin: \"'\",\n    end: \"'\",\n    illegal: \"\\\\n\",\n    contains: [\n        BACKSLASH_ESCAPE\n    ]\n};\nconst QUOTE_STRING_MODE = {\n    scope: \"string\",\n    begin: '\"',\n    end: '\"',\n    illegal: \"\\\\n\",\n    contains: [\n        BACKSLASH_ESCAPE\n    ]\n};\nconst PHRASAL_WORDS_MODE = {\n    begin: /\\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\\b/\n};\n/**\n * Creates a comment mode\n *\n * @param {string | RegExp} begin\n * @param {string | RegExp} end\n * @param {Mode | {}} [modeOptions]\n * @returns {Partial<Mode>}\n */ const COMMENT = function(begin, end, modeOptions = {}) {\n    const mode = inherit$1({\n        scope: \"comment\",\n        begin,\n        end,\n        contains: []\n    }, modeOptions);\n    mode.contains.push({\n        scope: \"doctag\",\n        // hack to avoid the space from being included. the space is necessary to\n        // match here to prevent the plain text rule below from gobbling up doctags\n        begin: \"[ ]*(?=(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):)\",\n        end: /(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):/,\n        excludeBegin: true,\n        relevance: 0\n    });\n    const ENGLISH_WORD = either(// list of common 1 and 2 letter words in English\n    \"I\", \"a\", \"is\", \"so\", \"us\", \"to\", \"at\", \"if\", \"in\", \"it\", \"on\", // note: this is not an exhaustive list of contractions, just popular ones\n    /[A-Za-z]+['](d|ve|re|ll|t|s|n)/, /[A-Za-z]+[-][a-z]+/, /[A-Za-z][a-z]{2,}/ // allow capitalized words at beginning of sentences\n    );\n    // looking like plain text, more likely to be a comment\n    mode.contains.push({\n        // TODO: how to include \", (, ) without breaking grammars that use these for\n        // comment delimiters?\n        // begin: /[ ]+([()\"]?([A-Za-z'-]{3,}|is|a|I|so|us|[tT][oO]|at|if|in|it|on)[.]?[()\":]?([.][ ]|[ ]|\\))){3}/\n        // ---\n        // this tries to find sequences of 3 english words in a row (without any\n        // \"programming\" type syntax) this gives us a strong signal that we've\n        // TRULY found a comment - vs perhaps scanning with the wrong language.\n        // It's possible to find something that LOOKS like the start of the\n        // comment - but then if there is no readable text - good chance it is a\n        // false match and not a comment.\n        //\n        // for a visual example please see:\n        // https://github.com/highlightjs/highlight.js/issues/2827\n        begin: concat(/[ ]+/, \"(\", ENGLISH_WORD, /[.]?[:]?([.][ ]|[ ])/, \"){3}\") // look for 3 words in a row\n    });\n    return mode;\n};\nconst C_LINE_COMMENT_MODE = COMMENT(\"//\", \"$\");\nconst C_BLOCK_COMMENT_MODE = COMMENT(\"/\\\\*\", \"\\\\*/\");\nconst HASH_COMMENT_MODE = COMMENT(\"#\", \"$\");\nconst NUMBER_MODE = {\n    scope: \"number\",\n    begin: NUMBER_RE,\n    relevance: 0\n};\nconst C_NUMBER_MODE = {\n    scope: \"number\",\n    begin: C_NUMBER_RE,\n    relevance: 0\n};\nconst BINARY_NUMBER_MODE = {\n    scope: \"number\",\n    begin: BINARY_NUMBER_RE,\n    relevance: 0\n};\nconst REGEXP_MODE = {\n    scope: \"regexp\",\n    begin: /\\/(?=[^/\\n]*\\/)/,\n    end: /\\/[gimuy]*/,\n    contains: [\n        BACKSLASH_ESCAPE,\n        {\n            begin: /\\[/,\n            end: /\\]/,\n            relevance: 0,\n            contains: [\n                BACKSLASH_ESCAPE\n            ]\n        }\n    ]\n};\nconst TITLE_MODE = {\n    scope: \"title\",\n    begin: IDENT_RE,\n    relevance: 0\n};\nconst UNDERSCORE_TITLE_MODE = {\n    scope: \"title\",\n    begin: UNDERSCORE_IDENT_RE,\n    relevance: 0\n};\nconst METHOD_GUARD = {\n    // excludes method names from keyword processing\n    begin: \"\\\\.\\\\s*\" + UNDERSCORE_IDENT_RE,\n    relevance: 0\n};\n/**\n * Adds end same as begin mechanics to a mode\n *\n * Your mode must include at least a single () match group as that first match\n * group is what is used for comparison\n * @param {Partial<Mode>} mode\n */ const END_SAME_AS_BEGIN = function(mode) {\n    return Object.assign(mode, {\n        /** @type {ModeCallback} */ \"on:begin\": (m, resp)=>{\n            resp.data._beginMatch = m[1];\n        },\n        /** @type {ModeCallback} */ \"on:end\": (m, resp)=>{\n            if (resp.data._beginMatch !== m[1]) resp.ignoreMatch();\n        }\n    });\n};\nvar MODES = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    APOS_STRING_MODE: APOS_STRING_MODE,\n    BACKSLASH_ESCAPE: BACKSLASH_ESCAPE,\n    BINARY_NUMBER_MODE: BINARY_NUMBER_MODE,\n    BINARY_NUMBER_RE: BINARY_NUMBER_RE,\n    COMMENT: COMMENT,\n    C_BLOCK_COMMENT_MODE: C_BLOCK_COMMENT_MODE,\n    C_LINE_COMMENT_MODE: C_LINE_COMMENT_MODE,\n    C_NUMBER_MODE: C_NUMBER_MODE,\n    C_NUMBER_RE: C_NUMBER_RE,\n    END_SAME_AS_BEGIN: END_SAME_AS_BEGIN,\n    HASH_COMMENT_MODE: HASH_COMMENT_MODE,\n    IDENT_RE: IDENT_RE,\n    MATCH_NOTHING_RE: MATCH_NOTHING_RE,\n    METHOD_GUARD: METHOD_GUARD,\n    NUMBER_MODE: NUMBER_MODE,\n    NUMBER_RE: NUMBER_RE,\n    PHRASAL_WORDS_MODE: PHRASAL_WORDS_MODE,\n    QUOTE_STRING_MODE: QUOTE_STRING_MODE,\n    REGEXP_MODE: REGEXP_MODE,\n    RE_STARTERS_RE: RE_STARTERS_RE,\n    SHEBANG: SHEBANG,\n    TITLE_MODE: TITLE_MODE,\n    UNDERSCORE_IDENT_RE: UNDERSCORE_IDENT_RE,\n    UNDERSCORE_TITLE_MODE: UNDERSCORE_TITLE_MODE\n});\n/**\n@typedef {import('highlight.js').CallbackResponse} CallbackResponse\n@typedef {import('highlight.js').CompilerExt} CompilerExt\n*/ // Grammar extensions / plugins\n// See: https://github.com/highlightjs/highlight.js/issues/2833\n// Grammar extensions allow \"syntactic sugar\" to be added to the grammar modes\n// without requiring any underlying changes to the compiler internals.\n// `compileMatch` being the perfect small example of now allowing a grammar\n// author to write `match` when they desire to match a single expression rather\n// than being forced to use `begin`.  The extension then just moves `match` into\n// `begin` when it runs.  Ie, no features have been added, but we've just made\n// the experience of writing (and reading grammars) a little bit nicer.\n// ------\n// TODO: We need negative look-behind support to do this properly\n/**\n * Skip a match if it has a preceding dot\n *\n * This is used for `beginKeywords` to prevent matching expressions such as\n * `bob.keyword.do()`. The mode compiler automatically wires this up as a\n * special _internal_ 'on:begin' callback for modes with `beginKeywords`\n * @param {RegExpMatchArray} match\n * @param {CallbackResponse} response\n */ function skipIfHasPrecedingDot(match, response) {\n    const before = match.input[match.index - 1];\n    if (before === \".\") {\n        response.ignoreMatch();\n    }\n}\n/**\n *\n * @type {CompilerExt}\n */ function scopeClassName(mode, _parent) {\n    // eslint-disable-next-line no-undefined\n    if (mode.className !== undefined) {\n        mode.scope = mode.className;\n        delete mode.className;\n    }\n}\n/**\n * `beginKeywords` syntactic sugar\n * @type {CompilerExt}\n */ function beginKeywords(mode, parent) {\n    if (!parent) return;\n    if (!mode.beginKeywords) return;\n    // for languages with keywords that include non-word characters checking for\n    // a word boundary is not sufficient, so instead we check for a word boundary\n    // or whitespace - this does no harm in any case since our keyword engine\n    // doesn't allow spaces in keywords anyways and we still check for the boundary\n    // first\n    mode.begin = \"\\\\b(\" + mode.beginKeywords.split(\" \").join(\"|\") + \")(?!\\\\.)(?=\\\\b|\\\\s)\";\n    mode.__beforeBegin = skipIfHasPrecedingDot;\n    mode.keywords = mode.keywords || mode.beginKeywords;\n    delete mode.beginKeywords;\n    // prevents double relevance, the keywords themselves provide\n    // relevance, the mode doesn't need to double it\n    // eslint-disable-next-line no-undefined\n    if (mode.relevance === undefined) mode.relevance = 0;\n}\n/**\n * Allow `illegal` to contain an array of illegal values\n * @type {CompilerExt}\n */ function compileIllegal(mode, _parent) {\n    if (!Array.isArray(mode.illegal)) return;\n    mode.illegal = either(...mode.illegal);\n}\n/**\n * `match` to match a single expression for readability\n * @type {CompilerExt}\n */ function compileMatch(mode, _parent) {\n    if (!mode.match) return;\n    if (mode.begin || mode.end) throw new Error(\"begin & end are not supported with match\");\n    mode.begin = mode.match;\n    delete mode.match;\n}\n/**\n * provides the default 1 relevance to all modes\n * @type {CompilerExt}\n */ function compileRelevance(mode, _parent) {\n    // eslint-disable-next-line no-undefined\n    if (mode.relevance === undefined) mode.relevance = 1;\n}\n// allow beforeMatch to act as a \"qualifier\" for the match\n// the full match begin must be [beforeMatch][begin]\nconst beforeMatchExt = (mode, parent)=>{\n    if (!mode.beforeMatch) return;\n    // starts conflicts with endsParent which we need to make sure the child\n    // rule is not matched multiple times\n    if (mode.starts) throw new Error(\"beforeMatch cannot be used with starts\");\n    const originalMode = Object.assign({}, mode);\n    Object.keys(mode).forEach((key)=>{\n        delete mode[key];\n    });\n    mode.keywords = originalMode.keywords;\n    mode.begin = concat(originalMode.beforeMatch, lookahead(originalMode.begin));\n    mode.starts = {\n        relevance: 0,\n        contains: [\n            Object.assign(originalMode, {\n                endsParent: true\n            })\n        ]\n    };\n    mode.relevance = 0;\n    delete originalMode.beforeMatch;\n};\n// keywords that should have no default relevance value\nconst COMMON_KEYWORDS = [\n    \"of\",\n    \"and\",\n    \"for\",\n    \"in\",\n    \"not\",\n    \"or\",\n    \"if\",\n    \"then\",\n    \"parent\",\n    \"list\",\n    \"value\" // common variable name\n];\nconst DEFAULT_KEYWORD_SCOPE = \"keyword\";\n/**\n * Given raw keywords from a language definition, compile them.\n *\n * @param {string | Record<string,string|string[]> | Array<string>} rawKeywords\n * @param {boolean} caseInsensitive\n */ function compileKeywords(rawKeywords, caseInsensitive, scopeName = DEFAULT_KEYWORD_SCOPE) {\n    /** @type {import(\"highlight.js/private\").KeywordDict} */ const compiledKeywords = Object.create(null);\n    // input can be a string of keywords, an array of keywords, or a object with\n    // named keys representing scopeName (which can then point to a string or array)\n    if (typeof rawKeywords === \"string\") {\n        compileList(scopeName, rawKeywords.split(\" \"));\n    } else if (Array.isArray(rawKeywords)) {\n        compileList(scopeName, rawKeywords);\n    } else {\n        Object.keys(rawKeywords).forEach(function(scopeName) {\n            // collapse all our objects back into the parent object\n            Object.assign(compiledKeywords, compileKeywords(rawKeywords[scopeName], caseInsensitive, scopeName));\n        });\n    }\n    return compiledKeywords;\n    // ---\n    /**\n   * Compiles an individual list of keywords\n   *\n   * Ex: \"for if when while|5\"\n   *\n   * @param {string} scopeName\n   * @param {Array<string>} keywordList\n   */ function compileList(scopeName, keywordList) {\n        if (caseInsensitive) {\n            keywordList = keywordList.map((x)=>x.toLowerCase());\n        }\n        keywordList.forEach(function(keyword) {\n            const pair = keyword.split(\"|\");\n            compiledKeywords[pair[0]] = [\n                scopeName,\n                scoreForKeyword(pair[0], pair[1])\n            ];\n        });\n    }\n}\n/**\n * Returns the proper score for a given keyword\n *\n * Also takes into account comment keywords, which will be scored 0 UNLESS\n * another score has been manually assigned.\n * @param {string} keyword\n * @param {string} [providedScore]\n */ function scoreForKeyword(keyword, providedScore) {\n    // manual scores always win over common keywords\n    // so you can force a score of 1 if you really insist\n    if (providedScore) {\n        return Number(providedScore);\n    }\n    return commonKeyword(keyword) ? 0 : 1;\n}\n/**\n * Determines if a given keyword is common or not\n *\n * @param {string} keyword */ function commonKeyword(keyword) {\n    return COMMON_KEYWORDS.includes(keyword.toLowerCase());\n}\n/*\n\nFor the reasoning behind this please see:\nhttps://github.com/highlightjs/highlight.js/issues/2880#issuecomment-747275419\n\n*/ /**\n * @type {Record<string, boolean>}\n */ const seenDeprecations = {};\n/**\n * @param {string} message\n */ const error = (message)=>{\n    console.error(message);\n};\n/**\n * @param {string} message\n * @param {any} args\n */ const warn = (message, ...args)=>{\n    console.log(`WARN: ${message}`, ...args);\n};\n/**\n * @param {string} version\n * @param {string} message\n */ const deprecated = (version, message)=>{\n    if (seenDeprecations[`${version}/${message}`]) return;\n    console.log(`Deprecated as of ${version}. ${message}`);\n    seenDeprecations[`${version}/${message}`] = true;\n};\n/* eslint-disable no-throw-literal */ /**\n@typedef {import('highlight.js').CompiledMode} CompiledMode\n*/ const MultiClassError = new Error();\n/**\n * Renumbers labeled scope names to account for additional inner match\n * groups that otherwise would break everything.\n *\n * Lets say we 3 match scopes:\n *\n *   { 1 => ..., 2 => ..., 3 => ... }\n *\n * So what we need is a clean match like this:\n *\n *   (a)(b)(c) => [ \"a\", \"b\", \"c\" ]\n *\n * But this falls apart with inner match groups:\n *\n * (a)(((b)))(c) => [\"a\", \"b\", \"b\", \"b\", \"c\" ]\n *\n * Our scopes are now \"out of alignment\" and we're repeating `b` 3 times.\n * What needs to happen is the numbers are remapped:\n *\n *   { 1 => ..., 2 => ..., 5 => ... }\n *\n * We also need to know that the ONLY groups that should be output\n * are 1, 2, and 5.  This function handles this behavior.\n *\n * @param {CompiledMode} mode\n * @param {Array<RegExp | string>} regexes\n * @param {{key: \"beginScope\"|\"endScope\"}} opts\n */ function remapScopeNames(mode, regexes, { key }) {\n    let offset = 0;\n    const scopeNames = mode[key];\n    /** @type Record<number,boolean> */ const emit = {};\n    /** @type Record<number,string> */ const positions = {};\n    for(let i = 1; i <= regexes.length; i++){\n        positions[i + offset] = scopeNames[i];\n        emit[i + offset] = true;\n        offset += countMatchGroups(regexes[i - 1]);\n    }\n    // we use _emit to keep track of which match groups are \"top-level\" to avoid double\n    // output from inside match groups\n    mode[key] = positions;\n    mode[key]._emit = emit;\n    mode[key]._multi = true;\n}\n/**\n * @param {CompiledMode} mode\n */ function beginMultiClass(mode) {\n    if (!Array.isArray(mode.begin)) return;\n    if (mode.skip || mode.excludeBegin || mode.returnBegin) {\n        error(\"skip, excludeBegin, returnBegin not compatible with beginScope: {}\");\n        throw MultiClassError;\n    }\n    if (typeof mode.beginScope !== \"object\" || mode.beginScope === null) {\n        error(\"beginScope must be object\");\n        throw MultiClassError;\n    }\n    remapScopeNames(mode, mode.begin, {\n        key: \"beginScope\"\n    });\n    mode.begin = _rewriteBackreferences(mode.begin, {\n        joinWith: \"\"\n    });\n}\n/**\n * @param {CompiledMode} mode\n */ function endMultiClass(mode) {\n    if (!Array.isArray(mode.end)) return;\n    if (mode.skip || mode.excludeEnd || mode.returnEnd) {\n        error(\"skip, excludeEnd, returnEnd not compatible with endScope: {}\");\n        throw MultiClassError;\n    }\n    if (typeof mode.endScope !== \"object\" || mode.endScope === null) {\n        error(\"endScope must be object\");\n        throw MultiClassError;\n    }\n    remapScopeNames(mode, mode.end, {\n        key: \"endScope\"\n    });\n    mode.end = _rewriteBackreferences(mode.end, {\n        joinWith: \"\"\n    });\n}\n/**\n * this exists only to allow `scope: {}` to be used beside `match:`\n * Otherwise `beginScope` would necessary and that would look weird\n\n  {\n    match: [ /def/, /\\w+/ ]\n    scope: { 1: \"keyword\" , 2: \"title\" }\n  }\n\n * @param {CompiledMode} mode\n */ function scopeSugar(mode) {\n    if (mode.scope && typeof mode.scope === \"object\" && mode.scope !== null) {\n        mode.beginScope = mode.scope;\n        delete mode.scope;\n    }\n}\n/**\n * @param {CompiledMode} mode\n */ function MultiClass(mode) {\n    scopeSugar(mode);\n    if (typeof mode.beginScope === \"string\") {\n        mode.beginScope = {\n            _wrap: mode.beginScope\n        };\n    }\n    if (typeof mode.endScope === \"string\") {\n        mode.endScope = {\n            _wrap: mode.endScope\n        };\n    }\n    beginMultiClass(mode);\n    endMultiClass(mode);\n}\n/**\n@typedef {import('highlight.js').Mode} Mode\n@typedef {import('highlight.js').CompiledMode} CompiledMode\n@typedef {import('highlight.js').Language} Language\n@typedef {import('highlight.js').HLJSPlugin} HLJSPlugin\n@typedef {import('highlight.js').CompiledLanguage} CompiledLanguage\n*/ // compilation\n/**\n * Compiles a language definition result\n *\n * Given the raw result of a language definition (Language), compiles this so\n * that it is ready for highlighting code.\n * @param {Language} language\n * @returns {CompiledLanguage}\n */ function compileLanguage(language) {\n    /**\n   * Builds a regex with the case sensitivity of the current language\n   *\n   * @param {RegExp | string} value\n   * @param {boolean} [global]\n   */ function langRe(value, global) {\n        return new RegExp(source(value), \"m\" + (language.case_insensitive ? \"i\" : \"\") + (language.unicodeRegex ? \"u\" : \"\") + (global ? \"g\" : \"\"));\n    }\n    /**\n    Stores multiple regular expressions and allows you to quickly search for\n    them all in a string simultaneously - returning the first match.  It does\n    this by creating a huge (a|b|c) regex - each individual item wrapped with ()\n    and joined by `|` - using match groups to track position.  When a match is\n    found checking which position in the array has content allows us to figure\n    out which of the original regexes / match groups triggered the match.\n\n    The match object itself (the result of `Regex.exec`) is returned but also\n    enhanced by merging in any meta-data that was registered with the regex.\n    This is how we keep track of which mode matched, and what type of rule\n    (`illegal`, `begin`, end, etc).\n  */ class MultiRegex {\n        constructor(){\n            this.matchIndexes = {};\n            // @ts-ignore\n            this.regexes = [];\n            this.matchAt = 1;\n            this.position = 0;\n        }\n        // @ts-ignore\n        addRule(re, opts) {\n            opts.position = this.position++;\n            // @ts-ignore\n            this.matchIndexes[this.matchAt] = opts;\n            this.regexes.push([\n                opts,\n                re\n            ]);\n            this.matchAt += countMatchGroups(re) + 1;\n        }\n        compile() {\n            if (this.regexes.length === 0) {\n                // avoids the need to check length every time exec is called\n                // @ts-ignore\n                this.exec = ()=>null;\n            }\n            const terminators = this.regexes.map((el)=>el[1]);\n            this.matcherRe = langRe(_rewriteBackreferences(terminators, {\n                joinWith: \"|\"\n            }), true);\n            this.lastIndex = 0;\n        }\n        /** @param {string} s */ exec(s) {\n            this.matcherRe.lastIndex = this.lastIndex;\n            const match = this.matcherRe.exec(s);\n            if (!match) {\n                return null;\n            }\n            // eslint-disable-next-line no-undefined\n            const i = match.findIndex((el, i)=>i > 0 && el !== undefined);\n            // @ts-ignore\n            const matchData = this.matchIndexes[i];\n            // trim off any earlier non-relevant match groups (ie, the other regex\n            // match groups that make up the multi-matcher)\n            match.splice(0, i);\n            return Object.assign(match, matchData);\n        }\n    }\n    /*\n    Created to solve the key deficiently with MultiRegex - there is no way to\n    test for multiple matches at a single location.  Why would we need to do\n    that?  In the future a more dynamic engine will allow certain matches to be\n    ignored.  An example: if we matched say the 3rd regex in a large group but\n    decided to ignore it - we'd need to started testing again at the 4th\n    regex... but MultiRegex itself gives us no real way to do that.\n\n    So what this class creates MultiRegexs on the fly for whatever search\n    position they are needed.\n\n    NOTE: These additional MultiRegex objects are created dynamically.  For most\n    grammars most of the time we will never actually need anything more than the\n    first MultiRegex - so this shouldn't have too much overhead.\n\n    Say this is our search group, and we match regex3, but wish to ignore it.\n\n      regex1 | regex2 | regex3 | regex4 | regex5    ' ie, startAt = 0\n\n    What we need is a new MultiRegex that only includes the remaining\n    possibilities:\n\n      regex4 | regex5                               ' ie, startAt = 3\n\n    This class wraps all that complexity up in a simple API... `startAt` decides\n    where in the array of expressions to start doing the matching. It\n    auto-increments, so if a match is found at position 2, then startAt will be\n    set to 3.  If the end is reached startAt will return to 0.\n\n    MOST of the time the parser will be setting startAt manually to 0.\n  */ class ResumableMultiRegex {\n        constructor(){\n            // @ts-ignore\n            this.rules = [];\n            // @ts-ignore\n            this.multiRegexes = [];\n            this.count = 0;\n            this.lastIndex = 0;\n            this.regexIndex = 0;\n        }\n        // @ts-ignore\n        getMatcher(index) {\n            if (this.multiRegexes[index]) return this.multiRegexes[index];\n            const matcher = new MultiRegex();\n            this.rules.slice(index).forEach(([re, opts])=>matcher.addRule(re, opts));\n            matcher.compile();\n            this.multiRegexes[index] = matcher;\n            return matcher;\n        }\n        resumingScanAtSamePosition() {\n            return this.regexIndex !== 0;\n        }\n        considerAll() {\n            this.regexIndex = 0;\n        }\n        // @ts-ignore\n        addRule(re, opts) {\n            this.rules.push([\n                re,\n                opts\n            ]);\n            if (opts.type === \"begin\") this.count++;\n        }\n        /** @param {string} s */ exec(s) {\n            const m = this.getMatcher(this.regexIndex);\n            m.lastIndex = this.lastIndex;\n            let result = m.exec(s);\n            // The following is because we have no easy way to say \"resume scanning at the\n            // existing position but also skip the current rule ONLY\". What happens is\n            // all prior rules are also skipped which can result in matching the wrong\n            // thing. Example of matching \"booger\":\n            // our matcher is [string, \"booger\", number]\n            //\n            // ....booger....\n            // if \"booger\" is ignored then we'd really need a regex to scan from the\n            // SAME position for only: [string, number] but ignoring \"booger\" (if it\n            // was the first match), a simple resume would scan ahead who knows how\n            // far looking only for \"number\", ignoring potential string matches (or\n            // future \"booger\" matches that might be valid.)\n            // So what we do: We execute two matchers, one resuming at the same\n            // position, but the second full matcher starting at the position after:\n            //     /--- resume first regex match here (for [number])\n            //     |/---- full match here for [string, \"booger\", number]\n            //     vv\n            // ....booger....\n            // Which ever results in a match first is then used. So this 3-4 step\n            // process essentially allows us to say \"match at this position, excluding\n            // a prior rule that was ignored\".\n            //\n            // 1. Match \"booger\" first, ignore. Also proves that [string] does non match.\n            // 2. Resume matching for [number]\n            // 3. Match at index + 1 for [string, \"booger\", number]\n            // 4. If #2 and #3 result in matches, which came first?\n            if (this.resumingScanAtSamePosition()) {\n                if (result && result.index === this.lastIndex) ;\n                else {\n                    const m2 = this.getMatcher(0);\n                    m2.lastIndex = this.lastIndex + 1;\n                    result = m2.exec(s);\n                }\n            }\n            if (result) {\n                this.regexIndex += result.position + 1;\n                if (this.regexIndex === this.count) {\n                    // wrap-around to considering all matches again\n                    this.considerAll();\n                }\n            }\n            return result;\n        }\n    }\n    /**\n   * Given a mode, builds a huge ResumableMultiRegex that can be used to walk\n   * the content and find matches.\n   *\n   * @param {CompiledMode} mode\n   * @returns {ResumableMultiRegex}\n   */ function buildModeRegex(mode) {\n        const mm = new ResumableMultiRegex();\n        mode.contains.forEach((term)=>mm.addRule(term.begin, {\n                rule: term,\n                type: \"begin\"\n            }));\n        if (mode.terminatorEnd) {\n            mm.addRule(mode.terminatorEnd, {\n                type: \"end\"\n            });\n        }\n        if (mode.illegal) {\n            mm.addRule(mode.illegal, {\n                type: \"illegal\"\n            });\n        }\n        return mm;\n    }\n    /** skip vs abort vs ignore\n   *\n   * @skip   - The mode is still entered and exited normally (and contains rules apply),\n   *           but all content is held and added to the parent buffer rather than being\n   *           output when the mode ends.  Mostly used with `sublanguage` to build up\n   *           a single large buffer than can be parsed by sublanguage.\n   *\n   *             - The mode begin ands ends normally.\n   *             - Content matched is added to the parent mode buffer.\n   *             - The parser cursor is moved forward normally.\n   *\n   * @abort  - A hack placeholder until we have ignore.  Aborts the mode (as if it\n   *           never matched) but DOES NOT continue to match subsequent `contains`\n   *           modes.  Abort is bad/suboptimal because it can result in modes\n   *           farther down not getting applied because an earlier rule eats the\n   *           content but then aborts.\n   *\n   *             - The mode does not begin.\n   *             - Content matched by `begin` is added to the mode buffer.\n   *             - The parser cursor is moved forward accordingly.\n   *\n   * @ignore - Ignores the mode (as if it never matched) and continues to match any\n   *           subsequent `contains` modes.  Ignore isn't technically possible with\n   *           the current parser implementation.\n   *\n   *             - The mode does not begin.\n   *             - Content matched by `begin` is ignored.\n   *             - The parser cursor is not moved forward.\n   */ /**\n   * Compiles an individual mode\n   *\n   * This can raise an error if the mode contains certain detectable known logic\n   * issues.\n   * @param {Mode} mode\n   * @param {CompiledMode | null} [parent]\n   * @returns {CompiledMode | never}\n   */ function compileMode(mode, parent) {\n        const cmode = /** @type CompiledMode */ mode;\n        if (mode.isCompiled) return cmode;\n        [\n            scopeClassName,\n            // do this early so compiler extensions generally don't have to worry about\n            // the distinction between match/begin\n            compileMatch,\n            MultiClass,\n            beforeMatchExt\n        ].forEach((ext)=>ext(mode, parent));\n        language.compilerExtensions.forEach((ext)=>ext(mode, parent));\n        // __beforeBegin is considered private API, internal use only\n        mode.__beforeBegin = null;\n        [\n            beginKeywords,\n            // do this later so compiler extensions that come earlier have access to the\n            // raw array if they wanted to perhaps manipulate it, etc.\n            compileIllegal,\n            // default to 1 relevance if not specified\n            compileRelevance\n        ].forEach((ext)=>ext(mode, parent));\n        mode.isCompiled = true;\n        let keywordPattern = null;\n        if (typeof mode.keywords === \"object\" && mode.keywords.$pattern) {\n            // we need a copy because keywords might be compiled multiple times\n            // so we can't go deleting $pattern from the original on the first\n            // pass\n            mode.keywords = Object.assign({}, mode.keywords);\n            keywordPattern = mode.keywords.$pattern;\n            delete mode.keywords.$pattern;\n        }\n        keywordPattern = keywordPattern || /\\w+/;\n        if (mode.keywords) {\n            mode.keywords = compileKeywords(mode.keywords, language.case_insensitive);\n        }\n        cmode.keywordPatternRe = langRe(keywordPattern, true);\n        if (parent) {\n            if (!mode.begin) mode.begin = /\\B|\\b/;\n            cmode.beginRe = langRe(cmode.begin);\n            if (!mode.end && !mode.endsWithParent) mode.end = /\\B|\\b/;\n            if (mode.end) cmode.endRe = langRe(cmode.end);\n            cmode.terminatorEnd = source(cmode.end) || \"\";\n            if (mode.endsWithParent && parent.terminatorEnd) {\n                cmode.terminatorEnd += (mode.end ? \"|\" : \"\") + parent.terminatorEnd;\n            }\n        }\n        if (mode.illegal) cmode.illegalRe = langRe(/** @type {RegExp | string} */ mode.illegal);\n        if (!mode.contains) mode.contains = [];\n        mode.contains = [].concat(...mode.contains.map(function(c) {\n            return expandOrCloneMode(c === \"self\" ? mode : c);\n        }));\n        mode.contains.forEach(function(c) {\n            compileMode(/** @type Mode */ c, cmode);\n        });\n        if (mode.starts) {\n            compileMode(mode.starts, parent);\n        }\n        cmode.matcher = buildModeRegex(cmode);\n        return cmode;\n    }\n    if (!language.compilerExtensions) language.compilerExtensions = [];\n    // self is not valid at the top-level\n    if (language.contains && language.contains.includes(\"self\")) {\n        throw new Error(\"ERR: contains `self` is not supported at the top-level of a language.  See documentation.\");\n    }\n    // we need a null object, which inherit will guarantee\n    language.classNameAliases = inherit$1(language.classNameAliases || {});\n    return compileMode(/** @type Mode */ language);\n}\n/**\n * Determines if a mode has a dependency on it's parent or not\n *\n * If a mode does have a parent dependency then often we need to clone it if\n * it's used in multiple places so that each copy points to the correct parent,\n * where-as modes without a parent can often safely be re-used at the bottom of\n * a mode chain.\n *\n * @param {Mode | null} mode\n * @returns {boolean} - is there a dependency on the parent?\n * */ function dependencyOnParent(mode) {\n    if (!mode) return false;\n    return mode.endsWithParent || dependencyOnParent(mode.starts);\n}\n/**\n * Expands a mode or clones it if necessary\n *\n * This is necessary for modes with parental dependenceis (see notes on\n * `dependencyOnParent`) and for nodes that have `variants` - which must then be\n * exploded into their own individual modes at compile time.\n *\n * @param {Mode} mode\n * @returns {Mode | Mode[]}\n * */ function expandOrCloneMode(mode) {\n    if (mode.variants && !mode.cachedVariants) {\n        mode.cachedVariants = mode.variants.map(function(variant) {\n            return inherit$1(mode, {\n                variants: null\n            }, variant);\n        });\n    }\n    // EXPAND\n    // if we have variants then essentially \"replace\" the mode with the variants\n    // this happens in compileMode, where this function is called from\n    if (mode.cachedVariants) {\n        return mode.cachedVariants;\n    }\n    // CLONE\n    // if we have dependencies on parents then we need a unique\n    // instance of ourselves, so we can be reused with many\n    // different parents without issue\n    if (dependencyOnParent(mode)) {\n        return inherit$1(mode, {\n            starts: mode.starts ? inherit$1(mode.starts) : null\n        });\n    }\n    if (Object.isFrozen(mode)) {\n        return inherit$1(mode);\n    }\n    // no special dependency issues, just return ourselves\n    return mode;\n}\nvar version = \"11.9.0\";\nclass HTMLInjectionError extends Error {\n    constructor(reason, html){\n        super(reason);\n        this.name = \"HTMLInjectionError\";\n        this.html = html;\n    }\n}\n/*\nSyntax highlighting with language autodetection.\nhttps://highlightjs.org/\n*/ /**\n@typedef {import('highlight.js').Mode} Mode\n@typedef {import('highlight.js').CompiledMode} CompiledMode\n@typedef {import('highlight.js').CompiledScope} CompiledScope\n@typedef {import('highlight.js').Language} Language\n@typedef {import('highlight.js').HLJSApi} HLJSApi\n@typedef {import('highlight.js').HLJSPlugin} HLJSPlugin\n@typedef {import('highlight.js').PluginEvent} PluginEvent\n@typedef {import('highlight.js').HLJSOptions} HLJSOptions\n@typedef {import('highlight.js').LanguageFn} LanguageFn\n@typedef {import('highlight.js').HighlightedHTMLElement} HighlightedHTMLElement\n@typedef {import('highlight.js').BeforeHighlightContext} BeforeHighlightContext\n@typedef {import('highlight.js/private').MatchType} MatchType\n@typedef {import('highlight.js/private').KeywordData} KeywordData\n@typedef {import('highlight.js/private').EnhancedMatch} EnhancedMatch\n@typedef {import('highlight.js/private').AnnotatedError} AnnotatedError\n@typedef {import('highlight.js').AutoHighlightResult} AutoHighlightResult\n@typedef {import('highlight.js').HighlightOptions} HighlightOptions\n@typedef {import('highlight.js').HighlightResult} HighlightResult\n*/ const escape = escapeHTML;\nconst inherit = inherit$1;\nconst NO_MATCH = Symbol(\"nomatch\");\nconst MAX_KEYWORD_HITS = 7;\n/**\n * @param {any} hljs - object that is extended (legacy)\n * @returns {HLJSApi}\n */ const HLJS = function(hljs) {\n    // Global internal variables used within the highlight.js library.\n    /** @type {Record<string, Language>} */ const languages = Object.create(null);\n    /** @type {Record<string, string>} */ const aliases = Object.create(null);\n    /** @type {HLJSPlugin[]} */ const plugins = [];\n    // safe/production mode - swallows more errors, tries to keep running\n    // even if a single syntax or parse hits a fatal error\n    let SAFE_MODE = true;\n    const LANGUAGE_NOT_FOUND = \"Could not find the language '{}', did you forget to load/include a language module?\";\n    /** @type {Language} */ const PLAINTEXT_LANGUAGE = {\n        disableAutodetect: true,\n        name: \"Plain text\",\n        contains: []\n    };\n    // Global options used when within external APIs. This is modified when\n    // calling the `hljs.configure` function.\n    /** @type HLJSOptions */ let options = {\n        ignoreUnescapedHTML: false,\n        throwUnescapedHTML: false,\n        noHighlightRe: /^(no-?highlight)$/i,\n        languageDetectRe: /\\blang(?:uage)?-([\\w-]+)\\b/i,\n        classPrefix: \"hljs-\",\n        cssSelector: \"pre code\",\n        languages: null,\n        // beta configuration options, subject to change, welcome to discuss\n        // https://github.com/highlightjs/highlight.js/issues/1086\n        __emitter: TokenTreeEmitter\n    };\n    /* Utility functions */ /**\n   * Tests a language name to see if highlighting should be skipped\n   * @param {string} languageName\n   */ function shouldNotHighlight(languageName) {\n        return options.noHighlightRe.test(languageName);\n    }\n    /**\n   * @param {HighlightedHTMLElement} block - the HTML element to determine language for\n   */ function blockLanguage(block) {\n        let classes = block.className + \" \";\n        classes += block.parentNode ? block.parentNode.className : \"\";\n        // language-* takes precedence over non-prefixed class names.\n        const match = options.languageDetectRe.exec(classes);\n        if (match) {\n            const language = getLanguage(match[1]);\n            if (!language) {\n                warn(LANGUAGE_NOT_FOUND.replace(\"{}\", match[1]));\n                warn(\"Falling back to no-highlight mode for this block.\", block);\n            }\n            return language ? match[1] : \"no-highlight\";\n        }\n        return classes.split(/\\s+/).find((_class)=>shouldNotHighlight(_class) || getLanguage(_class));\n    }\n    /**\n   * Core highlighting function.\n   *\n   * OLD API\n   * highlight(lang, code, ignoreIllegals, continuation)\n   *\n   * NEW API\n   * highlight(code, {lang, ignoreIllegals})\n   *\n   * @param {string} codeOrLanguageName - the language to use for highlighting\n   * @param {string | HighlightOptions} optionsOrCode - the code to highlight\n   * @param {boolean} [ignoreIllegals] - whether to ignore illegal matches, default is to bail\n   *\n   * @returns {HighlightResult} Result - an object that represents the result\n   * @property {string} language - the language name\n   * @property {number} relevance - the relevance score\n   * @property {string} value - the highlighted HTML code\n   * @property {string} code - the original raw code\n   * @property {CompiledMode} top - top of the current mode stack\n   * @property {boolean} illegal - indicates whether any illegal matches were found\n  */ function highlight(codeOrLanguageName, optionsOrCode, ignoreIllegals) {\n        let code = \"\";\n        let languageName = \"\";\n        if (typeof optionsOrCode === \"object\") {\n            code = codeOrLanguageName;\n            ignoreIllegals = optionsOrCode.ignoreIllegals;\n            languageName = optionsOrCode.language;\n        } else {\n            // old API\n            deprecated(\"10.7.0\", \"highlight(lang, code, ...args) has been deprecated.\");\n            deprecated(\"10.7.0\", \"Please use highlight(code, options) instead.\\nhttps://github.com/highlightjs/highlight.js/issues/2277\");\n            languageName = codeOrLanguageName;\n            code = optionsOrCode;\n        }\n        // https://github.com/highlightjs/highlight.js/issues/3149\n        // eslint-disable-next-line no-undefined\n        if (ignoreIllegals === undefined) {\n            ignoreIllegals = true;\n        }\n        /** @type {BeforeHighlightContext} */ const context = {\n            code,\n            language: languageName\n        };\n        // the plugin can change the desired language or the code to be highlighted\n        // just be changing the object it was passed\n        fire(\"before:highlight\", context);\n        // a before plugin can usurp the result completely by providing it's own\n        // in which case we don't even need to call highlight\n        const result = context.result ? context.result : _highlight(context.language, context.code, ignoreIllegals);\n        result.code = context.code;\n        // the plugin can change anything in result to suite it\n        fire(\"after:highlight\", result);\n        return result;\n    }\n    /**\n   * private highlight that's used internally and does not fire callbacks\n   *\n   * @param {string} languageName - the language to use for highlighting\n   * @param {string} codeToHighlight - the code to highlight\n   * @param {boolean?} [ignoreIllegals] - whether to ignore illegal matches, default is to bail\n   * @param {CompiledMode?} [continuation] - current continuation mode, if any\n   * @returns {HighlightResult} - result of the highlight operation\n  */ function _highlight(languageName, codeToHighlight, ignoreIllegals, continuation) {\n        const keywordHits = Object.create(null);\n        /**\n     * Return keyword data if a match is a keyword\n     * @param {CompiledMode} mode - current mode\n     * @param {string} matchText - the textual match\n     * @returns {KeywordData | false}\n     */ function keywordData(mode, matchText) {\n            return mode.keywords[matchText];\n        }\n        function processKeywords() {\n            if (!top.keywords) {\n                emitter.addText(modeBuffer);\n                return;\n            }\n            let lastIndex = 0;\n            top.keywordPatternRe.lastIndex = 0;\n            let match = top.keywordPatternRe.exec(modeBuffer);\n            let buf = \"\";\n            while(match){\n                buf += modeBuffer.substring(lastIndex, match.index);\n                const word = language.case_insensitive ? match[0].toLowerCase() : match[0];\n                const data = keywordData(top, word);\n                if (data) {\n                    const [kind, keywordRelevance] = data;\n                    emitter.addText(buf);\n                    buf = \"\";\n                    keywordHits[word] = (keywordHits[word] || 0) + 1;\n                    if (keywordHits[word] <= MAX_KEYWORD_HITS) relevance += keywordRelevance;\n                    if (kind.startsWith(\"_\")) {\n                        // _ implied for relevance only, do not highlight\n                        // by applying a class name\n                        buf += match[0];\n                    } else {\n                        const cssClass = language.classNameAliases[kind] || kind;\n                        emitKeyword(match[0], cssClass);\n                    }\n                } else {\n                    buf += match[0];\n                }\n                lastIndex = top.keywordPatternRe.lastIndex;\n                match = top.keywordPatternRe.exec(modeBuffer);\n            }\n            buf += modeBuffer.substring(lastIndex);\n            emitter.addText(buf);\n        }\n        function processSubLanguage() {\n            if (modeBuffer === \"\") return;\n            /** @type HighlightResult */ let result = null;\n            if (typeof top.subLanguage === \"string\") {\n                if (!languages[top.subLanguage]) {\n                    emitter.addText(modeBuffer);\n                    return;\n                }\n                result = _highlight(top.subLanguage, modeBuffer, true, continuations[top.subLanguage]);\n                continuations[top.subLanguage] = /** @type {CompiledMode} */ result._top;\n            } else {\n                result = highlightAuto(modeBuffer, top.subLanguage.length ? top.subLanguage : null);\n            }\n            // Counting embedded language score towards the host language may be disabled\n            // with zeroing the containing mode relevance. Use case in point is Markdown that\n            // allows XML everywhere and makes every XML snippet to have a much larger Markdown\n            // score.\n            if (top.relevance > 0) {\n                relevance += result.relevance;\n            }\n            emitter.__addSublanguage(result._emitter, result.language);\n        }\n        function processBuffer() {\n            if (top.subLanguage != null) {\n                processSubLanguage();\n            } else {\n                processKeywords();\n            }\n            modeBuffer = \"\";\n        }\n        /**\n     * @param {string} text\n     * @param {string} scope\n     */ function emitKeyword(keyword, scope) {\n            if (keyword === \"\") return;\n            emitter.startScope(scope);\n            emitter.addText(keyword);\n            emitter.endScope();\n        }\n        /**\n     * @param {CompiledScope} scope\n     * @param {RegExpMatchArray} match\n     */ function emitMultiClass(scope, match) {\n            let i = 1;\n            const max = match.length - 1;\n            while(i <= max){\n                if (!scope._emit[i]) {\n                    i++;\n                    continue;\n                }\n                const klass = language.classNameAliases[scope[i]] || scope[i];\n                const text = match[i];\n                if (klass) {\n                    emitKeyword(text, klass);\n                } else {\n                    modeBuffer = text;\n                    processKeywords();\n                    modeBuffer = \"\";\n                }\n                i++;\n            }\n        }\n        /**\n     * @param {CompiledMode} mode - new mode to start\n     * @param {RegExpMatchArray} match\n     */ function startNewMode(mode, match) {\n            if (mode.scope && typeof mode.scope === \"string\") {\n                emitter.openNode(language.classNameAliases[mode.scope] || mode.scope);\n            }\n            if (mode.beginScope) {\n                // beginScope just wraps the begin match itself in a scope\n                if (mode.beginScope._wrap) {\n                    emitKeyword(modeBuffer, language.classNameAliases[mode.beginScope._wrap] || mode.beginScope._wrap);\n                    modeBuffer = \"\";\n                } else if (mode.beginScope._multi) {\n                    // at this point modeBuffer should just be the match\n                    emitMultiClass(mode.beginScope, match);\n                    modeBuffer = \"\";\n                }\n            }\n            top = Object.create(mode, {\n                parent: {\n                    value: top\n                }\n            });\n            return top;\n        }\n        /**\n     * @param {CompiledMode } mode - the mode to potentially end\n     * @param {RegExpMatchArray} match - the latest match\n     * @param {string} matchPlusRemainder - match plus remainder of content\n     * @returns {CompiledMode | void} - the next mode, or if void continue on in current mode\n     */ function endOfMode(mode, match, matchPlusRemainder) {\n            let matched = startsWith(mode.endRe, matchPlusRemainder);\n            if (matched) {\n                if (mode[\"on:end\"]) {\n                    const resp = new Response(mode);\n                    mode[\"on:end\"](match, resp);\n                    if (resp.isMatchIgnored) matched = false;\n                }\n                if (matched) {\n                    while(mode.endsParent && mode.parent){\n                        mode = mode.parent;\n                    }\n                    return mode;\n                }\n            }\n            // even if on:end fires an `ignore` it's still possible\n            // that we might trigger the end node because of a parent mode\n            if (mode.endsWithParent) {\n                return endOfMode(mode.parent, match, matchPlusRemainder);\n            }\n        }\n        /**\n     * Handle matching but then ignoring a sequence of text\n     *\n     * @param {string} lexeme - string containing full match text\n     */ function doIgnore(lexeme) {\n            if (top.matcher.regexIndex === 0) {\n                // no more regexes to potentially match here, so we move the cursor forward one\n                // space\n                modeBuffer += lexeme[0];\n                return 1;\n            } else {\n                // no need to move the cursor, we still have additional regexes to try and\n                // match at this very spot\n                resumeScanAtSamePosition = true;\n                return 0;\n            }\n        }\n        /**\n     * Handle the start of a new potential mode match\n     *\n     * @param {EnhancedMatch} match - the current match\n     * @returns {number} how far to advance the parse cursor\n     */ function doBeginMatch(match) {\n            const lexeme = match[0];\n            const newMode = match.rule;\n            const resp = new Response(newMode);\n            // first internal before callbacks, then the public ones\n            const beforeCallbacks = [\n                newMode.__beforeBegin,\n                newMode[\"on:begin\"]\n            ];\n            for (const cb of beforeCallbacks){\n                if (!cb) continue;\n                cb(match, resp);\n                if (resp.isMatchIgnored) return doIgnore(lexeme);\n            }\n            if (newMode.skip) {\n                modeBuffer += lexeme;\n            } else {\n                if (newMode.excludeBegin) {\n                    modeBuffer += lexeme;\n                }\n                processBuffer();\n                if (!newMode.returnBegin && !newMode.excludeBegin) {\n                    modeBuffer = lexeme;\n                }\n            }\n            startNewMode(newMode, match);\n            return newMode.returnBegin ? 0 : lexeme.length;\n        }\n        /**\n     * Handle the potential end of mode\n     *\n     * @param {RegExpMatchArray} match - the current match\n     */ function doEndMatch(match) {\n            const lexeme = match[0];\n            const matchPlusRemainder = codeToHighlight.substring(match.index);\n            const endMode = endOfMode(top, match, matchPlusRemainder);\n            if (!endMode) {\n                return NO_MATCH;\n            }\n            const origin = top;\n            if (top.endScope && top.endScope._wrap) {\n                processBuffer();\n                emitKeyword(lexeme, top.endScope._wrap);\n            } else if (top.endScope && top.endScope._multi) {\n                processBuffer();\n                emitMultiClass(top.endScope, match);\n            } else if (origin.skip) {\n                modeBuffer += lexeme;\n            } else {\n                if (!(origin.returnEnd || origin.excludeEnd)) {\n                    modeBuffer += lexeme;\n                }\n                processBuffer();\n                if (origin.excludeEnd) {\n                    modeBuffer = lexeme;\n                }\n            }\n            do {\n                if (top.scope) {\n                    emitter.closeNode();\n                }\n                if (!top.skip && !top.subLanguage) {\n                    relevance += top.relevance;\n                }\n                top = top.parent;\n            }while (top !== endMode.parent);\n            if (endMode.starts) {\n                startNewMode(endMode.starts, match);\n            }\n            return origin.returnEnd ? 0 : lexeme.length;\n        }\n        function processContinuations() {\n            const list = [];\n            for(let current = top; current !== language; current = current.parent){\n                if (current.scope) {\n                    list.unshift(current.scope);\n                }\n            }\n            list.forEach((item)=>emitter.openNode(item));\n        }\n        /** @type {{type?: MatchType, index?: number, rule?: Mode}}} */ let lastMatch = {};\n        /**\n     *  Process an individual match\n     *\n     * @param {string} textBeforeMatch - text preceding the match (since the last match)\n     * @param {EnhancedMatch} [match] - the match itself\n     */ function processLexeme(textBeforeMatch, match) {\n            const lexeme = match && match[0];\n            // add non-matched text to the current mode buffer\n            modeBuffer += textBeforeMatch;\n            if (lexeme == null) {\n                processBuffer();\n                return 0;\n            }\n            // we've found a 0 width match and we're stuck, so we need to advance\n            // this happens when we have badly behaved rules that have optional matchers to the degree that\n            // sometimes they can end up matching nothing at all\n            // Ref: https://github.com/highlightjs/highlight.js/issues/2140\n            if (lastMatch.type === \"begin\" && match.type === \"end\" && lastMatch.index === match.index && lexeme === \"\") {\n                // spit the \"skipped\" character that our regex choked on back into the output sequence\n                modeBuffer += codeToHighlight.slice(match.index, match.index + 1);\n                if (!SAFE_MODE) {\n                    /** @type {AnnotatedError} */ const err = new Error(`0 width match regex (${languageName})`);\n                    err.languageName = languageName;\n                    err.badRule = lastMatch.rule;\n                    throw err;\n                }\n                return 1;\n            }\n            lastMatch = match;\n            if (match.type === \"begin\") {\n                return doBeginMatch(match);\n            } else if (match.type === \"illegal\" && !ignoreIllegals) {\n                // illegal match, we do not continue processing\n                /** @type {AnnotatedError} */ const err = new Error('Illegal lexeme \"' + lexeme + '\" for mode \"' + (top.scope || \"<unnamed>\") + '\"');\n                err.mode = top;\n                throw err;\n            } else if (match.type === \"end\") {\n                const processed = doEndMatch(match);\n                if (processed !== NO_MATCH) {\n                    return processed;\n                }\n            }\n            // edge case for when illegal matches $ (end of line) which is technically\n            // a 0 width match but not a begin/end match so it's not caught by the\n            // first handler (when ignoreIllegals is true)\n            if (match.type === \"illegal\" && lexeme === \"\") {\n                // advance so we aren't stuck in an infinite loop\n                return 1;\n            }\n            // infinite loops are BAD, this is a last ditch catch all. if we have a\n            // decent number of iterations yet our index (cursor position in our\n            // parsing) still 3x behind our index then something is very wrong\n            // so we bail\n            if (iterations > 100000 && iterations > match.index * 3) {\n                const err = new Error(\"potential infinite loop, way more iterations than matches\");\n                throw err;\n            }\n            /*\n      Why might be find ourselves here?  An potential end match that was\n      triggered but could not be completed.  IE, `doEndMatch` returned NO_MATCH.\n      (this could be because a callback requests the match be ignored, etc)\n\n      This causes no real harm other than stopping a few times too many.\n      */ modeBuffer += lexeme;\n            return lexeme.length;\n        }\n        const language = getLanguage(languageName);\n        if (!language) {\n            error(LANGUAGE_NOT_FOUND.replace(\"{}\", languageName));\n            throw new Error('Unknown language: \"' + languageName + '\"');\n        }\n        const md = compileLanguage(language);\n        let result = \"\";\n        /** @type {CompiledMode} */ let top = continuation || md;\n        /** @type Record<string,CompiledMode> */ const continuations = {}; // keep continuations for sub-languages\n        const emitter = new options.__emitter(options);\n        processContinuations();\n        let modeBuffer = \"\";\n        let relevance = 0;\n        let index = 0;\n        let iterations = 0;\n        let resumeScanAtSamePosition = false;\n        try {\n            if (!language.__emitTokens) {\n                top.matcher.considerAll();\n                for(;;){\n                    iterations++;\n                    if (resumeScanAtSamePosition) {\n                        // only regexes not matched previously will now be\n                        // considered for a potential match\n                        resumeScanAtSamePosition = false;\n                    } else {\n                        top.matcher.considerAll();\n                    }\n                    top.matcher.lastIndex = index;\n                    const match = top.matcher.exec(codeToHighlight);\n                    // console.log(\"match\", match[0], match.rule && match.rule.begin)\n                    if (!match) break;\n                    const beforeMatch = codeToHighlight.substring(index, match.index);\n                    const processedCount = processLexeme(beforeMatch, match);\n                    index = match.index + processedCount;\n                }\n                processLexeme(codeToHighlight.substring(index));\n            } else {\n                language.__emitTokens(codeToHighlight, emitter);\n            }\n            emitter.finalize();\n            result = emitter.toHTML();\n            return {\n                language: languageName,\n                value: result,\n                relevance,\n                illegal: false,\n                _emitter: emitter,\n                _top: top\n            };\n        } catch (err) {\n            if (err.message && err.message.includes(\"Illegal\")) {\n                return {\n                    language: languageName,\n                    value: escape(codeToHighlight),\n                    illegal: true,\n                    relevance: 0,\n                    _illegalBy: {\n                        message: err.message,\n                        index,\n                        context: codeToHighlight.slice(index - 100, index + 100),\n                        mode: err.mode,\n                        resultSoFar: result\n                    },\n                    _emitter: emitter\n                };\n            } else if (SAFE_MODE) {\n                return {\n                    language: languageName,\n                    value: escape(codeToHighlight),\n                    illegal: false,\n                    relevance: 0,\n                    errorRaised: err,\n                    _emitter: emitter,\n                    _top: top\n                };\n            } else {\n                throw err;\n            }\n        }\n    }\n    /**\n   * returns a valid highlight result, without actually doing any actual work,\n   * auto highlight starts with this and it's possible for small snippets that\n   * auto-detection may not find a better match\n   * @param {string} code\n   * @returns {HighlightResult}\n   */ function justTextHighlightResult(code) {\n        const result = {\n            value: escape(code),\n            illegal: false,\n            relevance: 0,\n            _top: PLAINTEXT_LANGUAGE,\n            _emitter: new options.__emitter(options)\n        };\n        result._emitter.addText(code);\n        return result;\n    }\n    /**\n  Highlighting with language detection. Accepts a string with the code to\n  highlight. Returns an object with the following properties:\n\n  - language (detected language)\n  - relevance (int)\n  - value (an HTML string with highlighting markup)\n  - secondBest (object with the same structure for second-best heuristically\n    detected language, may be absent)\n\n    @param {string} code\n    @param {Array<string>} [languageSubset]\n    @returns {AutoHighlightResult}\n  */ function highlightAuto(code, languageSubset) {\n        languageSubset = languageSubset || options.languages || Object.keys(languages);\n        const plaintext = justTextHighlightResult(code);\n        const results = languageSubset.filter(getLanguage).filter(autoDetection).map((name)=>_highlight(name, code, false));\n        results.unshift(plaintext); // plaintext is always an option\n        const sorted = results.sort((a, b)=>{\n            // sort base on relevance\n            if (a.relevance !== b.relevance) return b.relevance - a.relevance;\n            // always award the tie to the base language\n            // ie if C++ and Arduino are tied, it's more likely to be C++\n            if (a.language && b.language) {\n                if (getLanguage(a.language).supersetOf === b.language) {\n                    return 1;\n                } else if (getLanguage(b.language).supersetOf === a.language) {\n                    return -1;\n                }\n            }\n            // otherwise say they are equal, which has the effect of sorting on\n            // relevance while preserving the original ordering - which is how ties\n            // have historically been settled, ie the language that comes first always\n            // wins in the case of a tie\n            return 0;\n        });\n        const [best, secondBest] = sorted;\n        /** @type {AutoHighlightResult} */ const result = best;\n        result.secondBest = secondBest;\n        return result;\n    }\n    /**\n   * Builds new class name for block given the language name\n   *\n   * @param {HTMLElement} element\n   * @param {string} [currentLang]\n   * @param {string} [resultLang]\n   */ function updateClassName(element, currentLang, resultLang) {\n        const language = currentLang && aliases[currentLang] || resultLang;\n        element.classList.add(\"hljs\");\n        element.classList.add(`language-${language}`);\n    }\n    /**\n   * Applies highlighting to a DOM node containing code.\n   *\n   * @param {HighlightedHTMLElement} element - the HTML element to highlight\n  */ function highlightElement(element) {\n        /** @type HTMLElement */ let node = null;\n        const language = blockLanguage(element);\n        if (shouldNotHighlight(language)) return;\n        fire(\"before:highlightElement\", {\n            el: element,\n            language\n        });\n        if (element.dataset.highlighted) {\n            console.log(\"Element previously highlighted. To highlight again, first unset `dataset.highlighted`.\", element);\n            return;\n        }\n        // we should be all text, no child nodes (unescaped HTML) - this is possibly\n        // an HTML injection attack - it's likely too late if this is already in\n        // production (the code has likely already done its damage by the time\n        // we're seeing it)... but we yell loudly about this so that hopefully it's\n        // more likely to be caught in development before making it to production\n        if (element.children.length > 0) {\n            if (!options.ignoreUnescapedHTML) {\n                console.warn(\"One of your code blocks includes unescaped HTML. This is a potentially serious security risk.\");\n                console.warn(\"https://github.com/highlightjs/highlight.js/wiki/security\");\n                console.warn(\"The element with unescaped HTML:\");\n                console.warn(element);\n            }\n            if (options.throwUnescapedHTML) {\n                const err = new HTMLInjectionError(\"One of your code blocks includes unescaped HTML.\", element.innerHTML);\n                throw err;\n            }\n        }\n        node = element;\n        const text = node.textContent;\n        const result = language ? highlight(text, {\n            language,\n            ignoreIllegals: true\n        }) : highlightAuto(text);\n        element.innerHTML = result.value;\n        element.dataset.highlighted = \"yes\";\n        updateClassName(element, language, result.language);\n        element.result = {\n            language: result.language,\n            // TODO: remove with version 11.0\n            re: result.relevance,\n            relevance: result.relevance\n        };\n        if (result.secondBest) {\n            element.secondBest = {\n                language: result.secondBest.language,\n                relevance: result.secondBest.relevance\n            };\n        }\n        fire(\"after:highlightElement\", {\n            el: element,\n            result,\n            text\n        });\n    }\n    /**\n   * Updates highlight.js global options with the passed options\n   *\n   * @param {Partial<HLJSOptions>} userOptions\n   */ function configure(userOptions) {\n        options = inherit(options, userOptions);\n    }\n    // TODO: remove v12, deprecated\n    const initHighlighting = ()=>{\n        highlightAll();\n        deprecated(\"10.6.0\", \"initHighlighting() deprecated.  Use highlightAll() now.\");\n    };\n    // TODO: remove v12, deprecated\n    function initHighlightingOnLoad() {\n        highlightAll();\n        deprecated(\"10.6.0\", \"initHighlightingOnLoad() deprecated.  Use highlightAll() now.\");\n    }\n    let wantsHighlight = false;\n    /**\n   * auto-highlights all pre>code elements on the page\n   */ function highlightAll() {\n        // if we are called too early in the loading process\n        if (document.readyState === \"loading\") {\n            wantsHighlight = true;\n            return;\n        }\n        const blocks = document.querySelectorAll(options.cssSelector);\n        blocks.forEach(highlightElement);\n    }\n    function boot() {\n        // if a highlight was requested before DOM was loaded, do now\n        if (wantsHighlight) highlightAll();\n    }\n    // make sure we are in the browser environment\n    if (false) {}\n    /**\n   * Register a language grammar module\n   *\n   * @param {string} languageName\n   * @param {LanguageFn} languageDefinition\n   */ function registerLanguage(languageName, languageDefinition) {\n        let lang = null;\n        try {\n            lang = languageDefinition(hljs);\n        } catch (error$1) {\n            error(\"Language definition for '{}' could not be registered.\".replace(\"{}\", languageName));\n            // hard or soft error\n            if (!SAFE_MODE) {\n                throw error$1;\n            } else {\n                error(error$1);\n            }\n            // languages that have serious errors are replaced with essentially a\n            // \"plaintext\" stand-in so that the code blocks will still get normal\n            // css classes applied to them - and one bad language won't break the\n            // entire highlighter\n            lang = PLAINTEXT_LANGUAGE;\n        }\n        // give it a temporary name if it doesn't have one in the meta-data\n        if (!lang.name) lang.name = languageName;\n        languages[languageName] = lang;\n        lang.rawDefinition = languageDefinition.bind(null, hljs);\n        if (lang.aliases) {\n            registerAliases(lang.aliases, {\n                languageName\n            });\n        }\n    }\n    /**\n   * Remove a language grammar module\n   *\n   * @param {string} languageName\n   */ function unregisterLanguage(languageName) {\n        delete languages[languageName];\n        for (const alias of Object.keys(aliases)){\n            if (aliases[alias] === languageName) {\n                delete aliases[alias];\n            }\n        }\n    }\n    /**\n   * @returns {string[]} List of language internal names\n   */ function listLanguages() {\n        return Object.keys(languages);\n    }\n    /**\n   * @param {string} name - name of the language to retrieve\n   * @returns {Language | undefined}\n   */ function getLanguage(name) {\n        name = (name || \"\").toLowerCase();\n        return languages[name] || languages[aliases[name]];\n    }\n    /**\n   *\n   * @param {string|string[]} aliasList - single alias or list of aliases\n   * @param {{languageName: string}} opts\n   */ function registerAliases(aliasList, { languageName }) {\n        if (typeof aliasList === \"string\") {\n            aliasList = [\n                aliasList\n            ];\n        }\n        aliasList.forEach((alias)=>{\n            aliases[alias.toLowerCase()] = languageName;\n        });\n    }\n    /**\n   * Determines if a given language has auto-detection enabled\n   * @param {string} name - name of the language\n   */ function autoDetection(name) {\n        const lang = getLanguage(name);\n        return lang && !lang.disableAutodetect;\n    }\n    /**\n   * Upgrades the old highlightBlock plugins to the new\n   * highlightElement API\n   * @param {HLJSPlugin} plugin\n   */ function upgradePluginAPI(plugin) {\n        // TODO: remove with v12\n        if (plugin[\"before:highlightBlock\"] && !plugin[\"before:highlightElement\"]) {\n            plugin[\"before:highlightElement\"] = (data)=>{\n                plugin[\"before:highlightBlock\"](Object.assign({\n                    block: data.el\n                }, data));\n            };\n        }\n        if (plugin[\"after:highlightBlock\"] && !plugin[\"after:highlightElement\"]) {\n            plugin[\"after:highlightElement\"] = (data)=>{\n                plugin[\"after:highlightBlock\"](Object.assign({\n                    block: data.el\n                }, data));\n            };\n        }\n    }\n    /**\n   * @param {HLJSPlugin} plugin\n   */ function addPlugin(plugin) {\n        upgradePluginAPI(plugin);\n        plugins.push(plugin);\n    }\n    /**\n   * @param {HLJSPlugin} plugin\n   */ function removePlugin(plugin) {\n        const index = plugins.indexOf(plugin);\n        if (index !== -1) {\n            plugins.splice(index, 1);\n        }\n    }\n    /**\n   *\n   * @param {PluginEvent} event\n   * @param {any} args\n   */ function fire(event, args) {\n        const cb = event;\n        plugins.forEach(function(plugin) {\n            if (plugin[cb]) {\n                plugin[cb](args);\n            }\n        });\n    }\n    /**\n   * DEPRECATED\n   * @param {HighlightedHTMLElement} el\n   */ function deprecateHighlightBlock(el) {\n        deprecated(\"10.7.0\", \"highlightBlock will be removed entirely in v12.0\");\n        deprecated(\"10.7.0\", \"Please use highlightElement now.\");\n        return highlightElement(el);\n    }\n    /* Interface definition */ Object.assign(hljs, {\n        highlight,\n        highlightAuto,\n        highlightAll,\n        highlightElement,\n        // TODO: Remove with v12 API\n        highlightBlock: deprecateHighlightBlock,\n        configure,\n        initHighlighting,\n        initHighlightingOnLoad,\n        registerLanguage,\n        unregisterLanguage,\n        listLanguages,\n        getLanguage,\n        registerAliases,\n        autoDetection,\n        inherit,\n        addPlugin,\n        removePlugin\n    });\n    hljs.debugMode = function() {\n        SAFE_MODE = false;\n    };\n    hljs.safeMode = function() {\n        SAFE_MODE = true;\n    };\n    hljs.versionString = version;\n    hljs.regex = {\n        concat: concat,\n        lookahead: lookahead,\n        either: either,\n        optional: optional,\n        anyNumberOfTimes: anyNumberOfTimes\n    };\n    for(const key in MODES){\n        // @ts-ignore\n        if (typeof MODES[key] === \"object\") {\n            // @ts-ignore\n            deepFreeze(MODES[key]);\n        }\n    }\n    // merge all the modes/regexes into our main object\n    Object.assign(hljs, MODES);\n    return hljs;\n};\n// Other names for the variable may break build script\nconst highlight = HLJS({});\n// returns a new instance of the highlighter to be used for extensions\n// check https://github.com/wooorm/lowlight/issues/47\nhighlight.newInstance = ()=>HLJS({});\nmodule.exports = highlight;\nhighlight.HighlightJS = highlight;\nhighlight.default = highlight;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/lib/core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/core.js":
/*!**********************************************!*\
  !*** ./node_modules/highlight.js/es/core.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HighlightJS: () => (/* reexport default export from named module */ _lib_core_js__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _lib_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/core.js */ \"(ssr)/./node_modules/highlight.js/lib/core.js\");\n// https://nodejs.org/api/packages.html#packages_writing_dual_packages_while_avoiding_or_minimizing_hazards\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_lib_core_js__WEBPACK_IMPORTED_MODULE_0__);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2NvcmUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsMkdBQTJHO0FBQ2xFO0FBQ2xCO0FBQ3ZCLGlFQUFlQSx5Q0FBV0EsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2RlZnJhZ21lbnRpbmctaWRlYXMvLi9ub2RlX21vZHVsZXMvaGlnaGxpZ2h0LmpzL2VzL2NvcmUuanM/MWUxNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL25vZGVqcy5vcmcvYXBpL3BhY2thZ2VzLmh0bWwjcGFja2FnZXNfd3JpdGluZ19kdWFsX3BhY2thZ2VzX3doaWxlX2F2b2lkaW5nX29yX21pbmltaXppbmdfaGF6YXJkc1xuaW1wb3J0IEhpZ2hsaWdodEpTIGZyb20gJy4uL2xpYi9jb3JlLmpzJztcbmV4cG9ydCB7IEhpZ2hsaWdodEpTIH07XG5leHBvcnQgZGVmYXVsdCBIaWdobGlnaHRKUztcbiJdLCJuYW1lcyI6WyJIaWdobGlnaHRKUyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/c.js":
/*!*****************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/c.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ c)\n/* harmony export */ });\n/*\nLanguage: C\nCategory: common, system\nWebsite: https://en.wikipedia.org/wiki/C_(programming_language)\n*/ /** @type LanguageFn */ function c(hljs) {\n    const regex = hljs.regex;\n    // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does\n    // not include such support nor can we be sure all the grammars depending\n    // on it would desire this behavior\n    const C_LINE_COMMENT_MODE = hljs.COMMENT(\"//\", \"$\", {\n        contains: [\n            {\n                begin: /\\\\\\n/\n            }\n        ]\n    });\n    const DECLTYPE_AUTO_RE = \"decltype\\\\(auto\\\\)\";\n    const NAMESPACE_RE = \"[a-zA-Z_]\\\\w*::\";\n    const TEMPLATE_ARGUMENT_RE = \"<[^<>]+>\";\n    const FUNCTION_TYPE_RE = \"(\" + DECLTYPE_AUTO_RE + \"|\" + regex.optional(NAMESPACE_RE) + \"[a-zA-Z_]\\\\w*\" + regex.optional(TEMPLATE_ARGUMENT_RE) + \")\";\n    const TYPES = {\n        className: \"type\",\n        variants: [\n            {\n                begin: \"\\\\b[a-z\\\\d_]*_t\\\\b\"\n            },\n            {\n                match: /\\batomic_[a-z]{3,6}\\b/\n            }\n        ]\n    };\n    // https://en.cppreference.com/w/cpp/language/escape\n    // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n    const CHARACTER_ESCAPES = \"\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)\";\n    const STRINGS = {\n        className: \"string\",\n        variants: [\n            {\n                begin: '(u8?|U|L)?\"',\n                end: '\"',\n                illegal: \"\\\\n\",\n                contains: [\n                    hljs.BACKSLASH_ESCAPE\n                ]\n            },\n            {\n                begin: \"(u8?|U|L)?'(\" + CHARACTER_ESCAPES + \"|.)\",\n                end: \"'\",\n                illegal: \".\"\n            },\n            hljs.END_SAME_AS_BEGIN({\n                begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,\n                end: /\\)([^()\\\\ ]{0,16})\"/\n            })\n        ]\n    };\n    const NUMBERS = {\n        className: \"number\",\n        variants: [\n            {\n                begin: \"\\\\b(0b[01']+)\"\n            },\n            {\n                begin: \"(-?)\\\\b([\\\\d']+(\\\\.[\\\\d']*)?|\\\\.[\\\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)\"\n            },\n            {\n                begin: \"(-?)(\\\\b0[xX][a-fA-F0-9']+|(\\\\b[\\\\d']+(\\\\.[\\\\d']*)?|\\\\.[\\\\d']+)([eE][-+]?[\\\\d']+)?)\"\n            }\n        ],\n        relevance: 0\n    };\n    const PREPROCESSOR = {\n        className: \"meta\",\n        begin: /#\\s*[a-z]+\\b/,\n        end: /$/,\n        keywords: {\n            keyword: \"if else elif endif define undef warning error line \" + \"pragma _Pragma ifdef ifndef include\"\n        },\n        contains: [\n            {\n                begin: /\\\\\\n/,\n                relevance: 0\n            },\n            hljs.inherit(STRINGS, {\n                className: \"string\"\n            }),\n            {\n                className: \"string\",\n                begin: /<.*?>/\n            },\n            C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE\n        ]\n    };\n    const TITLE_MODE = {\n        className: \"title\",\n        begin: regex.optional(NAMESPACE_RE) + hljs.IDENT_RE,\n        relevance: 0\n    };\n    const FUNCTION_TITLE = regex.optional(NAMESPACE_RE) + hljs.IDENT_RE + \"\\\\s*\\\\(\";\n    const C_KEYWORDS = [\n        \"asm\",\n        \"auto\",\n        \"break\",\n        \"case\",\n        \"continue\",\n        \"default\",\n        \"do\",\n        \"else\",\n        \"enum\",\n        \"extern\",\n        \"for\",\n        \"fortran\",\n        \"goto\",\n        \"if\",\n        \"inline\",\n        \"register\",\n        \"restrict\",\n        \"return\",\n        \"sizeof\",\n        \"struct\",\n        \"switch\",\n        \"typedef\",\n        \"union\",\n        \"volatile\",\n        \"while\",\n        \"_Alignas\",\n        \"_Alignof\",\n        \"_Atomic\",\n        \"_Generic\",\n        \"_Noreturn\",\n        \"_Static_assert\",\n        \"_Thread_local\",\n        // aliases\n        \"alignas\",\n        \"alignof\",\n        \"noreturn\",\n        \"static_assert\",\n        \"thread_local\",\n        // not a C keyword but is, for all intents and purposes, treated exactly like one.\n        \"_Pragma\"\n    ];\n    const C_TYPES = [\n        \"float\",\n        \"double\",\n        \"signed\",\n        \"unsigned\",\n        \"int\",\n        \"short\",\n        \"long\",\n        \"char\",\n        \"void\",\n        \"_Bool\",\n        \"_Complex\",\n        \"_Imaginary\",\n        \"_Decimal32\",\n        \"_Decimal64\",\n        \"_Decimal128\",\n        // modifiers\n        \"const\",\n        \"static\",\n        // aliases\n        \"complex\",\n        \"bool\",\n        \"imaginary\"\n    ];\n    const KEYWORDS = {\n        keyword: C_KEYWORDS,\n        type: C_TYPES,\n        literal: \"true false NULL\",\n        // TODO: apply hinting work similar to what was done in cpp.js\n        built_in: \"std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream \" + \"auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set \" + \"unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos \" + \"asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp \" + \"fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper \" + \"isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow \" + \"printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp \" + \"strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan \" + \"vfprintf vprintf vsprintf endl initializer_list unique_ptr\"\n    };\n    const EXPRESSION_CONTAINS = [\n        PREPROCESSOR,\n        TYPES,\n        C_LINE_COMMENT_MODE,\n        hljs.C_BLOCK_COMMENT_MODE,\n        NUMBERS,\n        STRINGS\n    ];\n    const EXPRESSION_CONTEXT = {\n        // This mode covers expression context where we can't expect a function\n        // definition and shouldn't highlight anything that looks like one:\n        // `return some()`, `else if()`, `(x*sum(1, 2))`\n        variants: [\n            {\n                begin: /=/,\n                end: /;/\n            },\n            {\n                begin: /\\(/,\n                end: /\\)/\n            },\n            {\n                beginKeywords: \"new throw return else\",\n                end: /;/\n            }\n        ],\n        keywords: KEYWORDS,\n        contains: EXPRESSION_CONTAINS.concat([\n            {\n                begin: /\\(/,\n                end: /\\)/,\n                keywords: KEYWORDS,\n                contains: EXPRESSION_CONTAINS.concat([\n                    \"self\"\n                ]),\n                relevance: 0\n            }\n        ]),\n        relevance: 0\n    };\n    const FUNCTION_DECLARATION = {\n        begin: \"(\" + FUNCTION_TYPE_RE + \"[\\\\*&\\\\s]+)+\" + FUNCTION_TITLE,\n        returnBegin: true,\n        end: /[{;=]/,\n        excludeEnd: true,\n        keywords: KEYWORDS,\n        illegal: /[^\\w\\s\\*&:<>.]/,\n        contains: [\n            {\n                begin: DECLTYPE_AUTO_RE,\n                keywords: KEYWORDS,\n                relevance: 0\n            },\n            {\n                begin: FUNCTION_TITLE,\n                returnBegin: true,\n                contains: [\n                    hljs.inherit(TITLE_MODE, {\n                        className: \"title.function\"\n                    })\n                ],\n                relevance: 0\n            },\n            // allow for multiple declarations, e.g.:\n            // extern void f(int), g(char);\n            {\n                relevance: 0,\n                match: /,/\n            },\n            {\n                className: \"params\",\n                begin: /\\(/,\n                end: /\\)/,\n                keywords: KEYWORDS,\n                relevance: 0,\n                contains: [\n                    C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE,\n                    STRINGS,\n                    NUMBERS,\n                    TYPES,\n                    // Count matching parentheses.\n                    {\n                        begin: /\\(/,\n                        end: /\\)/,\n                        keywords: KEYWORDS,\n                        relevance: 0,\n                        contains: [\n                            \"self\",\n                            C_LINE_COMMENT_MODE,\n                            hljs.C_BLOCK_COMMENT_MODE,\n                            STRINGS,\n                            NUMBERS,\n                            TYPES\n                        ]\n                    }\n                ]\n            },\n            TYPES,\n            C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            PREPROCESSOR\n        ]\n    };\n    return {\n        name: \"C\",\n        aliases: [\n            \"h\"\n        ],\n        keywords: KEYWORDS,\n        // Until differentiations are added between `c` and `cpp`, `c` will\n        // not be auto-detected to avoid auto-detect conflicts between C and C++\n        disableAutodetect: true,\n        illegal: \"</\",\n        contains: [].concat(EXPRESSION_CONTEXT, FUNCTION_DECLARATION, EXPRESSION_CONTAINS, [\n            PREPROCESSOR,\n            {\n                begin: hljs.IDENT_RE + \"::\",\n                keywords: KEYWORDS\n            },\n            {\n                className: \"class\",\n                beginKeywords: \"enum class struct union\",\n                end: /[{;:<>=]/,\n                contains: [\n                    {\n                        beginKeywords: \"final class struct\"\n                    },\n                    hljs.TITLE_MODE\n                ]\n            }\n        ]),\n        exports: {\n            preprocessor: PREPROCESSOR,\n            strings: STRINGS,\n            keywords: KEYWORDS\n        }\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/c.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/cpp.js":
/*!*******************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/cpp.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ cpp)\n/* harmony export */ });\n/*\nLanguage: C++\nCategory: common, system\nWebsite: https://isocpp.org\n*/ /** @type LanguageFn */ function cpp(hljs) {\n    const regex = hljs.regex;\n    // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does\n    // not include such support nor can we be sure all the grammars depending\n    // on it would desire this behavior\n    const C_LINE_COMMENT_MODE = hljs.COMMENT(\"//\", \"$\", {\n        contains: [\n            {\n                begin: /\\\\\\n/\n            }\n        ]\n    });\n    const DECLTYPE_AUTO_RE = \"decltype\\\\(auto\\\\)\";\n    const NAMESPACE_RE = \"[a-zA-Z_]\\\\w*::\";\n    const TEMPLATE_ARGUMENT_RE = \"<[^<>]+>\";\n    const FUNCTION_TYPE_RE = \"(?!struct)(\" + DECLTYPE_AUTO_RE + \"|\" + regex.optional(NAMESPACE_RE) + \"[a-zA-Z_]\\\\w*\" + regex.optional(TEMPLATE_ARGUMENT_RE) + \")\";\n    const CPP_PRIMITIVE_TYPES = {\n        className: \"type\",\n        begin: \"\\\\b[a-z\\\\d_]*_t\\\\b\"\n    };\n    // https://en.cppreference.com/w/cpp/language/escape\n    // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n    const CHARACTER_ESCAPES = \"\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)\";\n    const STRINGS = {\n        className: \"string\",\n        variants: [\n            {\n                begin: '(u8?|U|L)?\"',\n                end: '\"',\n                illegal: \"\\\\n\",\n                contains: [\n                    hljs.BACKSLASH_ESCAPE\n                ]\n            },\n            {\n                begin: \"(u8?|U|L)?'(\" + CHARACTER_ESCAPES + \"|.)\",\n                end: \"'\",\n                illegal: \".\"\n            },\n            hljs.END_SAME_AS_BEGIN({\n                begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,\n                end: /\\)([^()\\\\ ]{0,16})\"/\n            })\n        ]\n    };\n    const NUMBERS = {\n        className: \"number\",\n        variants: [\n            {\n                begin: \"\\\\b(0b[01']+)\"\n            },\n            {\n                begin: \"(-?)\\\\b([\\\\d']+(\\\\.[\\\\d']*)?|\\\\.[\\\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)\"\n            },\n            {\n                begin: \"(-?)(\\\\b0[xX][a-fA-F0-9']+|(\\\\b[\\\\d']+(\\\\.[\\\\d']*)?|\\\\.[\\\\d']+)([eE][-+]?[\\\\d']+)?)\"\n            }\n        ],\n        relevance: 0\n    };\n    const PREPROCESSOR = {\n        className: \"meta\",\n        begin: /#\\s*[a-z]+\\b/,\n        end: /$/,\n        keywords: {\n            keyword: \"if else elif endif define undef warning error line \" + \"pragma _Pragma ifdef ifndef include\"\n        },\n        contains: [\n            {\n                begin: /\\\\\\n/,\n                relevance: 0\n            },\n            hljs.inherit(STRINGS, {\n                className: \"string\"\n            }),\n            {\n                className: \"string\",\n                begin: /<.*?>/\n            },\n            C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE\n        ]\n    };\n    const TITLE_MODE = {\n        className: \"title\",\n        begin: regex.optional(NAMESPACE_RE) + hljs.IDENT_RE,\n        relevance: 0\n    };\n    const FUNCTION_TITLE = regex.optional(NAMESPACE_RE) + hljs.IDENT_RE + \"\\\\s*\\\\(\";\n    // https://en.cppreference.com/w/cpp/keyword\n    const RESERVED_KEYWORDS = [\n        \"alignas\",\n        \"alignof\",\n        \"and\",\n        \"and_eq\",\n        \"asm\",\n        \"atomic_cancel\",\n        \"atomic_commit\",\n        \"atomic_noexcept\",\n        \"auto\",\n        \"bitand\",\n        \"bitor\",\n        \"break\",\n        \"case\",\n        \"catch\",\n        \"class\",\n        \"co_await\",\n        \"co_return\",\n        \"co_yield\",\n        \"compl\",\n        \"concept\",\n        \"const_cast|10\",\n        \"consteval\",\n        \"constexpr\",\n        \"constinit\",\n        \"continue\",\n        \"decltype\",\n        \"default\",\n        \"delete\",\n        \"do\",\n        \"dynamic_cast|10\",\n        \"else\",\n        \"enum\",\n        \"explicit\",\n        \"export\",\n        \"extern\",\n        \"false\",\n        \"final\",\n        \"for\",\n        \"friend\",\n        \"goto\",\n        \"if\",\n        \"import\",\n        \"inline\",\n        \"module\",\n        \"mutable\",\n        \"namespace\",\n        \"new\",\n        \"noexcept\",\n        \"not\",\n        \"not_eq\",\n        \"nullptr\",\n        \"operator\",\n        \"or\",\n        \"or_eq\",\n        \"override\",\n        \"private\",\n        \"protected\",\n        \"public\",\n        \"reflexpr\",\n        \"register\",\n        \"reinterpret_cast|10\",\n        \"requires\",\n        \"return\",\n        \"sizeof\",\n        \"static_assert\",\n        \"static_cast|10\",\n        \"struct\",\n        \"switch\",\n        \"synchronized\",\n        \"template\",\n        \"this\",\n        \"thread_local\",\n        \"throw\",\n        \"transaction_safe\",\n        \"transaction_safe_dynamic\",\n        \"true\",\n        \"try\",\n        \"typedef\",\n        \"typeid\",\n        \"typename\",\n        \"union\",\n        \"using\",\n        \"virtual\",\n        \"volatile\",\n        \"while\",\n        \"xor\",\n        \"xor_eq\"\n    ];\n    // https://en.cppreference.com/w/cpp/keyword\n    const RESERVED_TYPES = [\n        \"bool\",\n        \"char\",\n        \"char16_t\",\n        \"char32_t\",\n        \"char8_t\",\n        \"double\",\n        \"float\",\n        \"int\",\n        \"long\",\n        \"short\",\n        \"void\",\n        \"wchar_t\",\n        \"unsigned\",\n        \"signed\",\n        \"const\",\n        \"static\"\n    ];\n    const TYPE_HINTS = [\n        \"any\",\n        \"auto_ptr\",\n        \"barrier\",\n        \"binary_semaphore\",\n        \"bitset\",\n        \"complex\",\n        \"condition_variable\",\n        \"condition_variable_any\",\n        \"counting_semaphore\",\n        \"deque\",\n        \"false_type\",\n        \"future\",\n        \"imaginary\",\n        \"initializer_list\",\n        \"istringstream\",\n        \"jthread\",\n        \"latch\",\n        \"lock_guard\",\n        \"multimap\",\n        \"multiset\",\n        \"mutex\",\n        \"optional\",\n        \"ostringstream\",\n        \"packaged_task\",\n        \"pair\",\n        \"promise\",\n        \"priority_queue\",\n        \"queue\",\n        \"recursive_mutex\",\n        \"recursive_timed_mutex\",\n        \"scoped_lock\",\n        \"set\",\n        \"shared_future\",\n        \"shared_lock\",\n        \"shared_mutex\",\n        \"shared_timed_mutex\",\n        \"shared_ptr\",\n        \"stack\",\n        \"string_view\",\n        \"stringstream\",\n        \"timed_mutex\",\n        \"thread\",\n        \"true_type\",\n        \"tuple\",\n        \"unique_lock\",\n        \"unique_ptr\",\n        \"unordered_map\",\n        \"unordered_multimap\",\n        \"unordered_multiset\",\n        \"unordered_set\",\n        \"variant\",\n        \"vector\",\n        \"weak_ptr\",\n        \"wstring\",\n        \"wstring_view\"\n    ];\n    const FUNCTION_HINTS = [\n        \"abort\",\n        \"abs\",\n        \"acos\",\n        \"apply\",\n        \"as_const\",\n        \"asin\",\n        \"atan\",\n        \"atan2\",\n        \"calloc\",\n        \"ceil\",\n        \"cerr\",\n        \"cin\",\n        \"clog\",\n        \"cos\",\n        \"cosh\",\n        \"cout\",\n        \"declval\",\n        \"endl\",\n        \"exchange\",\n        \"exit\",\n        \"exp\",\n        \"fabs\",\n        \"floor\",\n        \"fmod\",\n        \"forward\",\n        \"fprintf\",\n        \"fputs\",\n        \"free\",\n        \"frexp\",\n        \"fscanf\",\n        \"future\",\n        \"invoke\",\n        \"isalnum\",\n        \"isalpha\",\n        \"iscntrl\",\n        \"isdigit\",\n        \"isgraph\",\n        \"islower\",\n        \"isprint\",\n        \"ispunct\",\n        \"isspace\",\n        \"isupper\",\n        \"isxdigit\",\n        \"labs\",\n        \"launder\",\n        \"ldexp\",\n        \"log\",\n        \"log10\",\n        \"make_pair\",\n        \"make_shared\",\n        \"make_shared_for_overwrite\",\n        \"make_tuple\",\n        \"make_unique\",\n        \"malloc\",\n        \"memchr\",\n        \"memcmp\",\n        \"memcpy\",\n        \"memset\",\n        \"modf\",\n        \"move\",\n        \"pow\",\n        \"printf\",\n        \"putchar\",\n        \"puts\",\n        \"realloc\",\n        \"scanf\",\n        \"sin\",\n        \"sinh\",\n        \"snprintf\",\n        \"sprintf\",\n        \"sqrt\",\n        \"sscanf\",\n        \"std\",\n        \"stderr\",\n        \"stdin\",\n        \"stdout\",\n        \"strcat\",\n        \"strchr\",\n        \"strcmp\",\n        \"strcpy\",\n        \"strcspn\",\n        \"strlen\",\n        \"strncat\",\n        \"strncmp\",\n        \"strncpy\",\n        \"strpbrk\",\n        \"strrchr\",\n        \"strspn\",\n        \"strstr\",\n        \"swap\",\n        \"tan\",\n        \"tanh\",\n        \"terminate\",\n        \"to_underlying\",\n        \"tolower\",\n        \"toupper\",\n        \"vfprintf\",\n        \"visit\",\n        \"vprintf\",\n        \"vsprintf\"\n    ];\n    const LITERALS = [\n        \"NULL\",\n        \"false\",\n        \"nullopt\",\n        \"nullptr\",\n        \"true\"\n    ];\n    // https://en.cppreference.com/w/cpp/keyword\n    const BUILT_IN = [\n        \"_Pragma\"\n    ];\n    const CPP_KEYWORDS = {\n        type: RESERVED_TYPES,\n        keyword: RESERVED_KEYWORDS,\n        literal: LITERALS,\n        built_in: BUILT_IN,\n        _type_hints: TYPE_HINTS\n    };\n    const FUNCTION_DISPATCH = {\n        className: \"function.dispatch\",\n        relevance: 0,\n        keywords: {\n            // Only for relevance, not highlighting.\n            _hint: FUNCTION_HINTS\n        },\n        begin: regex.concat(/\\b/, /(?!decltype)/, /(?!if)/, /(?!for)/, /(?!switch)/, /(?!while)/, hljs.IDENT_RE, regex.lookahead(/(<[^<>]+>|)\\s*\\(/))\n    };\n    const EXPRESSION_CONTAINS = [\n        FUNCTION_DISPATCH,\n        PREPROCESSOR,\n        CPP_PRIMITIVE_TYPES,\n        C_LINE_COMMENT_MODE,\n        hljs.C_BLOCK_COMMENT_MODE,\n        NUMBERS,\n        STRINGS\n    ];\n    const EXPRESSION_CONTEXT = {\n        // This mode covers expression context where we can't expect a function\n        // definition and shouldn't highlight anything that looks like one:\n        // `return some()`, `else if()`, `(x*sum(1, 2))`\n        variants: [\n            {\n                begin: /=/,\n                end: /;/\n            },\n            {\n                begin: /\\(/,\n                end: /\\)/\n            },\n            {\n                beginKeywords: \"new throw return else\",\n                end: /;/\n            }\n        ],\n        keywords: CPP_KEYWORDS,\n        contains: EXPRESSION_CONTAINS.concat([\n            {\n                begin: /\\(/,\n                end: /\\)/,\n                keywords: CPP_KEYWORDS,\n                contains: EXPRESSION_CONTAINS.concat([\n                    \"self\"\n                ]),\n                relevance: 0\n            }\n        ]),\n        relevance: 0\n    };\n    const FUNCTION_DECLARATION = {\n        className: \"function\",\n        begin: \"(\" + FUNCTION_TYPE_RE + \"[\\\\*&\\\\s]+)+\" + FUNCTION_TITLE,\n        returnBegin: true,\n        end: /[{;=]/,\n        excludeEnd: true,\n        keywords: CPP_KEYWORDS,\n        illegal: /[^\\w\\s\\*&:<>.]/,\n        contains: [\n            {\n                begin: DECLTYPE_AUTO_RE,\n                keywords: CPP_KEYWORDS,\n                relevance: 0\n            },\n            {\n                begin: FUNCTION_TITLE,\n                returnBegin: true,\n                contains: [\n                    TITLE_MODE\n                ],\n                relevance: 0\n            },\n            // needed because we do not have look-behind on the below rule\n            // to prevent it from grabbing the final : in a :: pair\n            {\n                begin: /::/,\n                relevance: 0\n            },\n            // initializers\n            {\n                begin: /:/,\n                endsWithParent: true,\n                contains: [\n                    STRINGS,\n                    NUMBERS\n                ]\n            },\n            // allow for multiple declarations, e.g.:\n            // extern void f(int), g(char);\n            {\n                relevance: 0,\n                match: /,/\n            },\n            {\n                className: \"params\",\n                begin: /\\(/,\n                end: /\\)/,\n                keywords: CPP_KEYWORDS,\n                relevance: 0,\n                contains: [\n                    C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE,\n                    STRINGS,\n                    NUMBERS,\n                    CPP_PRIMITIVE_TYPES,\n                    // Count matching parentheses.\n                    {\n                        begin: /\\(/,\n                        end: /\\)/,\n                        keywords: CPP_KEYWORDS,\n                        relevance: 0,\n                        contains: [\n                            \"self\",\n                            C_LINE_COMMENT_MODE,\n                            hljs.C_BLOCK_COMMENT_MODE,\n                            STRINGS,\n                            NUMBERS,\n                            CPP_PRIMITIVE_TYPES\n                        ]\n                    }\n                ]\n            },\n            CPP_PRIMITIVE_TYPES,\n            C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            PREPROCESSOR\n        ]\n    };\n    return {\n        name: \"C++\",\n        aliases: [\n            \"cc\",\n            \"c++\",\n            \"h++\",\n            \"hpp\",\n            \"hh\",\n            \"hxx\",\n            \"cxx\"\n        ],\n        keywords: CPP_KEYWORDS,\n        illegal: \"</\",\n        classNameAliases: {\n            \"function.dispatch\": \"built_in\"\n        },\n        contains: [].concat(EXPRESSION_CONTEXT, FUNCTION_DECLARATION, FUNCTION_DISPATCH, EXPRESSION_CONTAINS, [\n            PREPROCESSOR,\n            {\n                begin: \"\\\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function)\\\\s*<(?!<)\",\n                end: \">\",\n                keywords: CPP_KEYWORDS,\n                contains: [\n                    \"self\",\n                    CPP_PRIMITIVE_TYPES\n                ]\n            },\n            {\n                begin: hljs.IDENT_RE + \"::\",\n                keywords: CPP_KEYWORDS\n            },\n            {\n                match: [\n                    // extra complexity to deal with `enum class` and `enum struct`\n                    /\\b(?:enum(?:\\s+(?:class|struct))?|class|struct|union)/,\n                    /\\s+/,\n                    /\\w+/\n                ],\n                className: {\n                    1: \"keyword\",\n                    3: \"title.class\"\n                }\n            }\n        ])\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/cpp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/csharp.js":
/*!**********************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/csharp.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ csharp)\n/* harmony export */ });\n/*\nLanguage: C#\nAuthor: Jason Diamond <jason@diamond.name>\nContributor: Nicolas LLOBERA <nllobera@gmail.com>, Pieter Vantorre <pietervantorre@gmail.com>, David Pine <david.pine@microsoft.com>\nWebsite: https://docs.microsoft.com/dotnet/csharp/\nCategory: common\n*/ /** @type LanguageFn */ function csharp(hljs) {\n    const BUILT_IN_KEYWORDS = [\n        \"bool\",\n        \"byte\",\n        \"char\",\n        \"decimal\",\n        \"delegate\",\n        \"double\",\n        \"dynamic\",\n        \"enum\",\n        \"float\",\n        \"int\",\n        \"long\",\n        \"nint\",\n        \"nuint\",\n        \"object\",\n        \"sbyte\",\n        \"short\",\n        \"string\",\n        \"ulong\",\n        \"uint\",\n        \"ushort\"\n    ];\n    const FUNCTION_MODIFIERS = [\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"static\",\n        \"internal\",\n        \"protected\",\n        \"abstract\",\n        \"async\",\n        \"extern\",\n        \"override\",\n        \"unsafe\",\n        \"virtual\",\n        \"new\",\n        \"sealed\",\n        \"partial\"\n    ];\n    const LITERAL_KEYWORDS = [\n        \"default\",\n        \"false\",\n        \"null\",\n        \"true\"\n    ];\n    const NORMAL_KEYWORDS = [\n        \"abstract\",\n        \"as\",\n        \"base\",\n        \"break\",\n        \"case\",\n        \"catch\",\n        \"class\",\n        \"const\",\n        \"continue\",\n        \"do\",\n        \"else\",\n        \"event\",\n        \"explicit\",\n        \"extern\",\n        \"finally\",\n        \"fixed\",\n        \"for\",\n        \"foreach\",\n        \"goto\",\n        \"if\",\n        \"implicit\",\n        \"in\",\n        \"interface\",\n        \"internal\",\n        \"is\",\n        \"lock\",\n        \"namespace\",\n        \"new\",\n        \"operator\",\n        \"out\",\n        \"override\",\n        \"params\",\n        \"private\",\n        \"protected\",\n        \"public\",\n        \"readonly\",\n        \"record\",\n        \"ref\",\n        \"return\",\n        \"scoped\",\n        \"sealed\",\n        \"sizeof\",\n        \"stackalloc\",\n        \"static\",\n        \"struct\",\n        \"switch\",\n        \"this\",\n        \"throw\",\n        \"try\",\n        \"typeof\",\n        \"unchecked\",\n        \"unsafe\",\n        \"using\",\n        \"virtual\",\n        \"void\",\n        \"volatile\",\n        \"while\"\n    ];\n    const CONTEXTUAL_KEYWORDS = [\n        \"add\",\n        \"alias\",\n        \"and\",\n        \"ascending\",\n        \"async\",\n        \"await\",\n        \"by\",\n        \"descending\",\n        \"equals\",\n        \"from\",\n        \"get\",\n        \"global\",\n        \"group\",\n        \"init\",\n        \"into\",\n        \"join\",\n        \"let\",\n        \"nameof\",\n        \"not\",\n        \"notnull\",\n        \"on\",\n        \"or\",\n        \"orderby\",\n        \"partial\",\n        \"remove\",\n        \"select\",\n        \"set\",\n        \"unmanaged\",\n        \"value|0\",\n        \"var\",\n        \"when\",\n        \"where\",\n        \"with\",\n        \"yield\"\n    ];\n    const KEYWORDS = {\n        keyword: NORMAL_KEYWORDS.concat(CONTEXTUAL_KEYWORDS),\n        built_in: BUILT_IN_KEYWORDS,\n        literal: LITERAL_KEYWORDS\n    };\n    const TITLE_MODE = hljs.inherit(hljs.TITLE_MODE, {\n        begin: \"[a-zA-Z](\\\\.?\\\\w)*\"\n    });\n    const NUMBERS = {\n        className: \"number\",\n        variants: [\n            {\n                begin: \"\\\\b(0b[01']+)\"\n            },\n            {\n                begin: \"(-?)\\\\b([\\\\d']+(\\\\.[\\\\d']*)?|\\\\.[\\\\d']+)(u|U|l|L|ul|UL|f|F|b|B)\"\n            },\n            {\n                begin: \"(-?)(\\\\b0[xX][a-fA-F0-9']+|(\\\\b[\\\\d']+(\\\\.[\\\\d']*)?|\\\\.[\\\\d']+)([eE][-+]?[\\\\d']+)?)\"\n            }\n        ],\n        relevance: 0\n    };\n    const VERBATIM_STRING = {\n        className: \"string\",\n        begin: '@\"',\n        end: '\"',\n        contains: [\n            {\n                begin: '\"\"'\n            }\n        ]\n    };\n    const VERBATIM_STRING_NO_LF = hljs.inherit(VERBATIM_STRING, {\n        illegal: /\\n/\n    });\n    const SUBST = {\n        className: \"subst\",\n        begin: /\\{/,\n        end: /\\}/,\n        keywords: KEYWORDS\n    };\n    const SUBST_NO_LF = hljs.inherit(SUBST, {\n        illegal: /\\n/\n    });\n    const INTERPOLATED_STRING = {\n        className: \"string\",\n        begin: /\\$\"/,\n        end: '\"',\n        illegal: /\\n/,\n        contains: [\n            {\n                begin: /\\{\\{/\n            },\n            {\n                begin: /\\}\\}/\n            },\n            hljs.BACKSLASH_ESCAPE,\n            SUBST_NO_LF\n        ]\n    };\n    const INTERPOLATED_VERBATIM_STRING = {\n        className: \"string\",\n        begin: /\\$@\"/,\n        end: '\"',\n        contains: [\n            {\n                begin: /\\{\\{/\n            },\n            {\n                begin: /\\}\\}/\n            },\n            {\n                begin: '\"\"'\n            },\n            SUBST\n        ]\n    };\n    const INTERPOLATED_VERBATIM_STRING_NO_LF = hljs.inherit(INTERPOLATED_VERBATIM_STRING, {\n        illegal: /\\n/,\n        contains: [\n            {\n                begin: /\\{\\{/\n            },\n            {\n                begin: /\\}\\}/\n            },\n            {\n                begin: '\"\"'\n            },\n            SUBST_NO_LF\n        ]\n    });\n    SUBST.contains = [\n        INTERPOLATED_VERBATIM_STRING,\n        INTERPOLATED_STRING,\n        VERBATIM_STRING,\n        hljs.APOS_STRING_MODE,\n        hljs.QUOTE_STRING_MODE,\n        NUMBERS,\n        hljs.C_BLOCK_COMMENT_MODE\n    ];\n    SUBST_NO_LF.contains = [\n        INTERPOLATED_VERBATIM_STRING_NO_LF,\n        INTERPOLATED_STRING,\n        VERBATIM_STRING_NO_LF,\n        hljs.APOS_STRING_MODE,\n        hljs.QUOTE_STRING_MODE,\n        NUMBERS,\n        hljs.inherit(hljs.C_BLOCK_COMMENT_MODE, {\n            illegal: /\\n/\n        })\n    ];\n    const STRING = {\n        variants: [\n            INTERPOLATED_VERBATIM_STRING,\n            INTERPOLATED_STRING,\n            VERBATIM_STRING,\n            hljs.APOS_STRING_MODE,\n            hljs.QUOTE_STRING_MODE\n        ]\n    };\n    const GENERIC_MODIFIER = {\n        begin: \"<\",\n        end: \">\",\n        contains: [\n            {\n                beginKeywords: \"in out\"\n            },\n            TITLE_MODE\n        ]\n    };\n    const TYPE_IDENT_RE = hljs.IDENT_RE + \"(<\" + hljs.IDENT_RE + \"(\\\\s*,\\\\s*\" + hljs.IDENT_RE + \")*>)?(\\\\[\\\\])?\";\n    const AT_IDENTIFIER = {\n        // prevents expressions like `@class` from incorrect flagging\n        // `class` as a keyword\n        begin: \"@\" + hljs.IDENT_RE,\n        relevance: 0\n    };\n    return {\n        name: \"C#\",\n        aliases: [\n            \"cs\",\n            \"c#\"\n        ],\n        keywords: KEYWORDS,\n        illegal: /::/,\n        contains: [\n            hljs.COMMENT(\"///\", \"$\", {\n                returnBegin: true,\n                contains: [\n                    {\n                        className: \"doctag\",\n                        variants: [\n                            {\n                                begin: \"///\",\n                                relevance: 0\n                            },\n                            {\n                                begin: \"<!--|-->\"\n                            },\n                            {\n                                begin: \"</?\",\n                                end: \">\"\n                            }\n                        ]\n                    }\n                ]\n            }),\n            hljs.C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            {\n                className: \"meta\",\n                begin: \"#\",\n                end: \"$\",\n                keywords: {\n                    keyword: \"if else elif endif define undef warning error line region endregion pragma checksum\"\n                }\n            },\n            STRING,\n            NUMBERS,\n            {\n                beginKeywords: \"class interface\",\n                relevance: 0,\n                end: /[{;=]/,\n                illegal: /[^\\s:,]/,\n                contains: [\n                    {\n                        beginKeywords: \"where class\"\n                    },\n                    TITLE_MODE,\n                    GENERIC_MODIFIER,\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE\n                ]\n            },\n            {\n                beginKeywords: \"namespace\",\n                relevance: 0,\n                end: /[{;=]/,\n                illegal: /[^\\s:]/,\n                contains: [\n                    TITLE_MODE,\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE\n                ]\n            },\n            {\n                beginKeywords: \"record\",\n                relevance: 0,\n                end: /[{;=]/,\n                illegal: /[^\\s:]/,\n                contains: [\n                    TITLE_MODE,\n                    GENERIC_MODIFIER,\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE\n                ]\n            },\n            {\n                // [Attributes(\"\")]\n                className: \"meta\",\n                begin: \"^\\\\s*\\\\[(?=[\\\\w])\",\n                excludeBegin: true,\n                end: \"\\\\]\",\n                excludeEnd: true,\n                contains: [\n                    {\n                        className: \"string\",\n                        begin: /\"/,\n                        end: /\"/\n                    }\n                ]\n            },\n            {\n                // Expression keywords prevent 'keyword Name(...)' from being\n                // recognized as a function definition\n                beginKeywords: \"new return throw await else\",\n                relevance: 0\n            },\n            {\n                className: \"function\",\n                begin: \"(\" + TYPE_IDENT_RE + \"\\\\s+)+\" + hljs.IDENT_RE + \"\\\\s*(<[^=]+>\\\\s*)?\\\\(\",\n                returnBegin: true,\n                end: /\\s*[{;=]/,\n                excludeEnd: true,\n                keywords: KEYWORDS,\n                contains: [\n                    // prevents these from being highlighted `title`\n                    {\n                        beginKeywords: FUNCTION_MODIFIERS.join(\" \"),\n                        relevance: 0\n                    },\n                    {\n                        begin: hljs.IDENT_RE + \"\\\\s*(<[^=]+>\\\\s*)?\\\\(\",\n                        returnBegin: true,\n                        contains: [\n                            hljs.TITLE_MODE,\n                            GENERIC_MODIFIER\n                        ],\n                        relevance: 0\n                    },\n                    {\n                        match: /\\(\\)/\n                    },\n                    {\n                        className: \"params\",\n                        begin: /\\(/,\n                        end: /\\)/,\n                        excludeBegin: true,\n                        excludeEnd: true,\n                        keywords: KEYWORDS,\n                        relevance: 0,\n                        contains: [\n                            STRING,\n                            NUMBERS,\n                            hljs.C_BLOCK_COMMENT_MODE\n                        ]\n                    },\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE\n                ]\n            },\n            AT_IDENTIFIER\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/csharp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/css.js":
/*!*******************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/css.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ css)\n/* harmony export */ });\nconst MODES = (hljs)=>{\n    return {\n        IMPORTANT: {\n            scope: \"meta\",\n            begin: \"!important\"\n        },\n        BLOCK_COMMENT: hljs.C_BLOCK_COMMENT_MODE,\n        HEXCOLOR: {\n            scope: \"number\",\n            begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\\b/\n        },\n        FUNCTION_DISPATCH: {\n            className: \"built_in\",\n            begin: /[\\w-]+(?=\\()/\n        },\n        ATTRIBUTE_SELECTOR_MODE: {\n            scope: \"selector-attr\",\n            begin: /\\[/,\n            end: /\\]/,\n            illegal: \"$\",\n            contains: [\n                hljs.APOS_STRING_MODE,\n                hljs.QUOTE_STRING_MODE\n            ]\n        },\n        CSS_NUMBER_MODE: {\n            scope: \"number\",\n            begin: hljs.NUMBER_RE + \"(\" + \"%|em|ex|ch|rem\" + \"|vw|vh|vmin|vmax\" + \"|cm|mm|in|pt|pc|px\" + \"|deg|grad|rad|turn\" + \"|s|ms\" + \"|Hz|kHz\" + \"|dpi|dpcm|dppx\" + \")?\",\n            relevance: 0\n        },\n        CSS_VARIABLE: {\n            className: \"attr\",\n            begin: /--[A-Za-z_][A-Za-z0-9_-]*/\n        }\n    };\n};\nconst TAGS = [\n    \"a\",\n    \"abbr\",\n    \"address\",\n    \"article\",\n    \"aside\",\n    \"audio\",\n    \"b\",\n    \"blockquote\",\n    \"body\",\n    \"button\",\n    \"canvas\",\n    \"caption\",\n    \"cite\",\n    \"code\",\n    \"dd\",\n    \"del\",\n    \"details\",\n    \"dfn\",\n    \"div\",\n    \"dl\",\n    \"dt\",\n    \"em\",\n    \"fieldset\",\n    \"figcaption\",\n    \"figure\",\n    \"footer\",\n    \"form\",\n    \"h1\",\n    \"h2\",\n    \"h3\",\n    \"h4\",\n    \"h5\",\n    \"h6\",\n    \"header\",\n    \"hgroup\",\n    \"html\",\n    \"i\",\n    \"iframe\",\n    \"img\",\n    \"input\",\n    \"ins\",\n    \"kbd\",\n    \"label\",\n    \"legend\",\n    \"li\",\n    \"main\",\n    \"mark\",\n    \"menu\",\n    \"nav\",\n    \"object\",\n    \"ol\",\n    \"p\",\n    \"q\",\n    \"quote\",\n    \"samp\",\n    \"section\",\n    \"span\",\n    \"strong\",\n    \"summary\",\n    \"sup\",\n    \"table\",\n    \"tbody\",\n    \"td\",\n    \"textarea\",\n    \"tfoot\",\n    \"th\",\n    \"thead\",\n    \"time\",\n    \"tr\",\n    \"ul\",\n    \"var\",\n    \"video\"\n];\nconst MEDIA_FEATURES = [\n    \"any-hover\",\n    \"any-pointer\",\n    \"aspect-ratio\",\n    \"color\",\n    \"color-gamut\",\n    \"color-index\",\n    \"device-aspect-ratio\",\n    \"device-height\",\n    \"device-width\",\n    \"display-mode\",\n    \"forced-colors\",\n    \"grid\",\n    \"height\",\n    \"hover\",\n    \"inverted-colors\",\n    \"monochrome\",\n    \"orientation\",\n    \"overflow-block\",\n    \"overflow-inline\",\n    \"pointer\",\n    \"prefers-color-scheme\",\n    \"prefers-contrast\",\n    \"prefers-reduced-motion\",\n    \"prefers-reduced-transparency\",\n    \"resolution\",\n    \"scan\",\n    \"scripting\",\n    \"update\",\n    \"width\",\n    // TODO: find a better solution?\n    \"min-width\",\n    \"max-width\",\n    \"min-height\",\n    \"max-height\"\n];\n// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes\nconst PSEUDO_CLASSES = [\n    \"active\",\n    \"any-link\",\n    \"blank\",\n    \"checked\",\n    \"current\",\n    \"default\",\n    \"defined\",\n    \"dir\",\n    \"disabled\",\n    \"drop\",\n    \"empty\",\n    \"enabled\",\n    \"first\",\n    \"first-child\",\n    \"first-of-type\",\n    \"fullscreen\",\n    \"future\",\n    \"focus\",\n    \"focus-visible\",\n    \"focus-within\",\n    \"has\",\n    \"host\",\n    \"host-context\",\n    \"hover\",\n    \"indeterminate\",\n    \"in-range\",\n    \"invalid\",\n    \"is\",\n    \"lang\",\n    \"last-child\",\n    \"last-of-type\",\n    \"left\",\n    \"link\",\n    \"local-link\",\n    \"not\",\n    \"nth-child\",\n    \"nth-col\",\n    \"nth-last-child\",\n    \"nth-last-col\",\n    \"nth-last-of-type\",\n    \"nth-of-type\",\n    \"only-child\",\n    \"only-of-type\",\n    \"optional\",\n    \"out-of-range\",\n    \"past\",\n    \"placeholder-shown\",\n    \"read-only\",\n    \"read-write\",\n    \"required\",\n    \"right\",\n    \"root\",\n    \"scope\",\n    \"target\",\n    \"target-within\",\n    \"user-invalid\",\n    \"valid\",\n    \"visited\",\n    \"where\" // where()\n];\n// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements\nconst PSEUDO_ELEMENTS = [\n    \"after\",\n    \"backdrop\",\n    \"before\",\n    \"cue\",\n    \"cue-region\",\n    \"first-letter\",\n    \"first-line\",\n    \"grammar-error\",\n    \"marker\",\n    \"part\",\n    \"placeholder\",\n    \"selection\",\n    \"slotted\",\n    \"spelling-error\"\n];\nconst ATTRIBUTES = [\n    \"align-content\",\n    \"align-items\",\n    \"align-self\",\n    \"all\",\n    \"animation\",\n    \"animation-delay\",\n    \"animation-direction\",\n    \"animation-duration\",\n    \"animation-fill-mode\",\n    \"animation-iteration-count\",\n    \"animation-name\",\n    \"animation-play-state\",\n    \"animation-timing-function\",\n    \"backface-visibility\",\n    \"background\",\n    \"background-attachment\",\n    \"background-blend-mode\",\n    \"background-clip\",\n    \"background-color\",\n    \"background-image\",\n    \"background-origin\",\n    \"background-position\",\n    \"background-repeat\",\n    \"background-size\",\n    \"block-size\",\n    \"border\",\n    \"border-block\",\n    \"border-block-color\",\n    \"border-block-end\",\n    \"border-block-end-color\",\n    \"border-block-end-style\",\n    \"border-block-end-width\",\n    \"border-block-start\",\n    \"border-block-start-color\",\n    \"border-block-start-style\",\n    \"border-block-start-width\",\n    \"border-block-style\",\n    \"border-block-width\",\n    \"border-bottom\",\n    \"border-bottom-color\",\n    \"border-bottom-left-radius\",\n    \"border-bottom-right-radius\",\n    \"border-bottom-style\",\n    \"border-bottom-width\",\n    \"border-collapse\",\n    \"border-color\",\n    \"border-image\",\n    \"border-image-outset\",\n    \"border-image-repeat\",\n    \"border-image-slice\",\n    \"border-image-source\",\n    \"border-image-width\",\n    \"border-inline\",\n    \"border-inline-color\",\n    \"border-inline-end\",\n    \"border-inline-end-color\",\n    \"border-inline-end-style\",\n    \"border-inline-end-width\",\n    \"border-inline-start\",\n    \"border-inline-start-color\",\n    \"border-inline-start-style\",\n    \"border-inline-start-width\",\n    \"border-inline-style\",\n    \"border-inline-width\",\n    \"border-left\",\n    \"border-left-color\",\n    \"border-left-style\",\n    \"border-left-width\",\n    \"border-radius\",\n    \"border-right\",\n    \"border-right-color\",\n    \"border-right-style\",\n    \"border-right-width\",\n    \"border-spacing\",\n    \"border-style\",\n    \"border-top\",\n    \"border-top-color\",\n    \"border-top-left-radius\",\n    \"border-top-right-radius\",\n    \"border-top-style\",\n    \"border-top-width\",\n    \"border-width\",\n    \"bottom\",\n    \"box-decoration-break\",\n    \"box-shadow\",\n    \"box-sizing\",\n    \"break-after\",\n    \"break-before\",\n    \"break-inside\",\n    \"caption-side\",\n    \"caret-color\",\n    \"clear\",\n    \"clip\",\n    \"clip-path\",\n    \"clip-rule\",\n    \"color\",\n    \"column-count\",\n    \"column-fill\",\n    \"column-gap\",\n    \"column-rule\",\n    \"column-rule-color\",\n    \"column-rule-style\",\n    \"column-rule-width\",\n    \"column-span\",\n    \"column-width\",\n    \"columns\",\n    \"contain\",\n    \"content\",\n    \"content-visibility\",\n    \"counter-increment\",\n    \"counter-reset\",\n    \"cue\",\n    \"cue-after\",\n    \"cue-before\",\n    \"cursor\",\n    \"direction\",\n    \"display\",\n    \"empty-cells\",\n    \"filter\",\n    \"flex\",\n    \"flex-basis\",\n    \"flex-direction\",\n    \"flex-flow\",\n    \"flex-grow\",\n    \"flex-shrink\",\n    \"flex-wrap\",\n    \"float\",\n    \"flow\",\n    \"font\",\n    \"font-display\",\n    \"font-family\",\n    \"font-feature-settings\",\n    \"font-kerning\",\n    \"font-language-override\",\n    \"font-size\",\n    \"font-size-adjust\",\n    \"font-smoothing\",\n    \"font-stretch\",\n    \"font-style\",\n    \"font-synthesis\",\n    \"font-variant\",\n    \"font-variant-caps\",\n    \"font-variant-east-asian\",\n    \"font-variant-ligatures\",\n    \"font-variant-numeric\",\n    \"font-variant-position\",\n    \"font-variation-settings\",\n    \"font-weight\",\n    \"gap\",\n    \"glyph-orientation-vertical\",\n    \"grid\",\n    \"grid-area\",\n    \"grid-auto-columns\",\n    \"grid-auto-flow\",\n    \"grid-auto-rows\",\n    \"grid-column\",\n    \"grid-column-end\",\n    \"grid-column-start\",\n    \"grid-gap\",\n    \"grid-row\",\n    \"grid-row-end\",\n    \"grid-row-start\",\n    \"grid-template\",\n    \"grid-template-areas\",\n    \"grid-template-columns\",\n    \"grid-template-rows\",\n    \"hanging-punctuation\",\n    \"height\",\n    \"hyphens\",\n    \"icon\",\n    \"image-orientation\",\n    \"image-rendering\",\n    \"image-resolution\",\n    \"ime-mode\",\n    \"inline-size\",\n    \"isolation\",\n    \"justify-content\",\n    \"left\",\n    \"letter-spacing\",\n    \"line-break\",\n    \"line-height\",\n    \"list-style\",\n    \"list-style-image\",\n    \"list-style-position\",\n    \"list-style-type\",\n    \"margin\",\n    \"margin-block\",\n    \"margin-block-end\",\n    \"margin-block-start\",\n    \"margin-bottom\",\n    \"margin-inline\",\n    \"margin-inline-end\",\n    \"margin-inline-start\",\n    \"margin-left\",\n    \"margin-right\",\n    \"margin-top\",\n    \"marks\",\n    \"mask\",\n    \"mask-border\",\n    \"mask-border-mode\",\n    \"mask-border-outset\",\n    \"mask-border-repeat\",\n    \"mask-border-slice\",\n    \"mask-border-source\",\n    \"mask-border-width\",\n    \"mask-clip\",\n    \"mask-composite\",\n    \"mask-image\",\n    \"mask-mode\",\n    \"mask-origin\",\n    \"mask-position\",\n    \"mask-repeat\",\n    \"mask-size\",\n    \"mask-type\",\n    \"max-block-size\",\n    \"max-height\",\n    \"max-inline-size\",\n    \"max-width\",\n    \"min-block-size\",\n    \"min-height\",\n    \"min-inline-size\",\n    \"min-width\",\n    \"mix-blend-mode\",\n    \"nav-down\",\n    \"nav-index\",\n    \"nav-left\",\n    \"nav-right\",\n    \"nav-up\",\n    \"none\",\n    \"normal\",\n    \"object-fit\",\n    \"object-position\",\n    \"opacity\",\n    \"order\",\n    \"orphans\",\n    \"outline\",\n    \"outline-color\",\n    \"outline-offset\",\n    \"outline-style\",\n    \"outline-width\",\n    \"overflow\",\n    \"overflow-wrap\",\n    \"overflow-x\",\n    \"overflow-y\",\n    \"padding\",\n    \"padding-block\",\n    \"padding-block-end\",\n    \"padding-block-start\",\n    \"padding-bottom\",\n    \"padding-inline\",\n    \"padding-inline-end\",\n    \"padding-inline-start\",\n    \"padding-left\",\n    \"padding-right\",\n    \"padding-top\",\n    \"page-break-after\",\n    \"page-break-before\",\n    \"page-break-inside\",\n    \"pause\",\n    \"pause-after\",\n    \"pause-before\",\n    \"perspective\",\n    \"perspective-origin\",\n    \"pointer-events\",\n    \"position\",\n    \"quotes\",\n    \"resize\",\n    \"rest\",\n    \"rest-after\",\n    \"rest-before\",\n    \"right\",\n    \"row-gap\",\n    \"scroll-margin\",\n    \"scroll-margin-block\",\n    \"scroll-margin-block-end\",\n    \"scroll-margin-block-start\",\n    \"scroll-margin-bottom\",\n    \"scroll-margin-inline\",\n    \"scroll-margin-inline-end\",\n    \"scroll-margin-inline-start\",\n    \"scroll-margin-left\",\n    \"scroll-margin-right\",\n    \"scroll-margin-top\",\n    \"scroll-padding\",\n    \"scroll-padding-block\",\n    \"scroll-padding-block-end\",\n    \"scroll-padding-block-start\",\n    \"scroll-padding-bottom\",\n    \"scroll-padding-inline\",\n    \"scroll-padding-inline-end\",\n    \"scroll-padding-inline-start\",\n    \"scroll-padding-left\",\n    \"scroll-padding-right\",\n    \"scroll-padding-top\",\n    \"scroll-snap-align\",\n    \"scroll-snap-stop\",\n    \"scroll-snap-type\",\n    \"scrollbar-color\",\n    \"scrollbar-gutter\",\n    \"scrollbar-width\",\n    \"shape-image-threshold\",\n    \"shape-margin\",\n    \"shape-outside\",\n    \"speak\",\n    \"speak-as\",\n    \"src\",\n    \"tab-size\",\n    \"table-layout\",\n    \"text-align\",\n    \"text-align-all\",\n    \"text-align-last\",\n    \"text-combine-upright\",\n    \"text-decoration\",\n    \"text-decoration-color\",\n    \"text-decoration-line\",\n    \"text-decoration-style\",\n    \"text-emphasis\",\n    \"text-emphasis-color\",\n    \"text-emphasis-position\",\n    \"text-emphasis-style\",\n    \"text-indent\",\n    \"text-justify\",\n    \"text-orientation\",\n    \"text-overflow\",\n    \"text-rendering\",\n    \"text-shadow\",\n    \"text-transform\",\n    \"text-underline-position\",\n    \"top\",\n    \"transform\",\n    \"transform-box\",\n    \"transform-origin\",\n    \"transform-style\",\n    \"transition\",\n    \"transition-delay\",\n    \"transition-duration\",\n    \"transition-property\",\n    \"transition-timing-function\",\n    \"unicode-bidi\",\n    \"vertical-align\",\n    \"visibility\",\n    \"voice-balance\",\n    \"voice-duration\",\n    \"voice-family\",\n    \"voice-pitch\",\n    \"voice-range\",\n    \"voice-rate\",\n    \"voice-stress\",\n    \"voice-volume\",\n    \"white-space\",\n    \"widows\",\n    \"width\",\n    \"will-change\",\n    \"word-break\",\n    \"word-spacing\",\n    \"word-wrap\",\n    \"writing-mode\",\n    \"z-index\"\n].reverse();\n/*\nLanguage: CSS\nCategory: common, css, web\nWebsite: https://developer.mozilla.org/en-US/docs/Web/CSS\n*/ /** @type LanguageFn */ function css(hljs) {\n    const regex = hljs.regex;\n    const modes = MODES(hljs);\n    const VENDOR_PREFIX = {\n        begin: /-(webkit|moz|ms|o)-(?=[a-z])/\n    };\n    const AT_MODIFIERS = \"and or not only\";\n    const AT_PROPERTY_RE = /@-?\\w[\\w]*(-\\w+)*/; // @-webkit-keyframes\n    const IDENT_RE = \"[a-zA-Z-][a-zA-Z0-9_-]*\";\n    const STRINGS = [\n        hljs.APOS_STRING_MODE,\n        hljs.QUOTE_STRING_MODE\n    ];\n    return {\n        name: \"CSS\",\n        case_insensitive: true,\n        illegal: /[=|'\\$]/,\n        keywords: {\n            keyframePosition: \"from to\"\n        },\n        classNameAliases: {\n            // for visual continuity with `tag {}` and because we\n            // don't have a great class for this?\n            keyframePosition: \"selector-tag\"\n        },\n        contains: [\n            modes.BLOCK_COMMENT,\n            VENDOR_PREFIX,\n            // to recognize keyframe 40% etc which are outside the scope of our\n            // attribute value mode\n            modes.CSS_NUMBER_MODE,\n            {\n                className: \"selector-id\",\n                begin: /#[A-Za-z0-9_-]+/,\n                relevance: 0\n            },\n            {\n                className: \"selector-class\",\n                begin: \"\\\\.\" + IDENT_RE,\n                relevance: 0\n            },\n            modes.ATTRIBUTE_SELECTOR_MODE,\n            {\n                className: \"selector-pseudo\",\n                variants: [\n                    {\n                        begin: \":(\" + PSEUDO_CLASSES.join(\"|\") + \")\"\n                    },\n                    {\n                        begin: \":(:)?(\" + PSEUDO_ELEMENTS.join(\"|\") + \")\"\n                    }\n                ]\n            },\n            // we may actually need this (12/2020)\n            // { // pseudo-selector params\n            //   begin: /\\(/,\n            //   end: /\\)/,\n            //   contains: [ hljs.CSS_NUMBER_MODE ]\n            // },\n            modes.CSS_VARIABLE,\n            {\n                className: \"attribute\",\n                begin: \"\\\\b(\" + ATTRIBUTES.join(\"|\") + \")\\\\b\"\n            },\n            // attribute values\n            {\n                begin: /:/,\n                end: /[;}{]/,\n                contains: [\n                    modes.BLOCK_COMMENT,\n                    modes.HEXCOLOR,\n                    modes.IMPORTANT,\n                    modes.CSS_NUMBER_MODE,\n                    ...STRINGS,\n                    // needed to highlight these as strings and to avoid issues with\n                    // illegal characters that might be inside urls that would tigger the\n                    // languages illegal stack\n                    {\n                        begin: /(url|data-uri)\\(/,\n                        end: /\\)/,\n                        relevance: 0,\n                        keywords: {\n                            built_in: \"url data-uri\"\n                        },\n                        contains: [\n                            ...STRINGS,\n                            {\n                                className: \"string\",\n                                // any character other than `)` as in `url()` will be the start\n                                // of a string, which ends with `)` (from the parent mode)\n                                begin: /[^)]/,\n                                endsWithParent: true,\n                                excludeEnd: true\n                            }\n                        ]\n                    },\n                    modes.FUNCTION_DISPATCH\n                ]\n            },\n            {\n                begin: regex.lookahead(/@/),\n                end: \"[{;]\",\n                relevance: 0,\n                illegal: /:/,\n                contains: [\n                    {\n                        className: \"keyword\",\n                        begin: AT_PROPERTY_RE\n                    },\n                    {\n                        begin: /\\s/,\n                        endsWithParent: true,\n                        excludeEnd: true,\n                        relevance: 0,\n                        keywords: {\n                            $pattern: /[a-z-]+/,\n                            keyword: AT_MODIFIERS,\n                            attribute: MEDIA_FEATURES.join(\" \")\n                        },\n                        contains: [\n                            {\n                                begin: /[a-z-]+(?=:)/,\n                                className: \"attribute\"\n                            },\n                            ...STRINGS,\n                            modes.CSS_NUMBER_MODE\n                        ]\n                    }\n                ]\n            },\n            {\n                className: \"selector-tag\",\n                begin: \"\\\\b(\" + TAGS.join(\"|\") + \")\\\\b\"\n            }\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/css.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/javascript.js":
/*!**************************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/javascript.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ javascript)\n/* harmony export */ });\nconst IDENT_RE = \"[A-Za-z$_][0-9A-Za-z$_]*\";\nconst KEYWORDS = [\n    \"as\",\n    \"in\",\n    \"of\",\n    \"if\",\n    \"for\",\n    \"while\",\n    \"finally\",\n    \"var\",\n    \"new\",\n    \"function\",\n    \"do\",\n    \"return\",\n    \"void\",\n    \"else\",\n    \"break\",\n    \"catch\",\n    \"instanceof\",\n    \"with\",\n    \"throw\",\n    \"case\",\n    \"default\",\n    \"try\",\n    \"switch\",\n    \"continue\",\n    \"typeof\",\n    \"delete\",\n    \"let\",\n    \"yield\",\n    \"const\",\n    \"class\",\n    // JS handles these with a special rule\n    // \"get\",\n    // \"set\",\n    \"debugger\",\n    \"async\",\n    \"await\",\n    \"static\",\n    \"import\",\n    \"from\",\n    \"export\",\n    \"extends\"\n];\nconst LITERALS = [\n    \"true\",\n    \"false\",\n    \"null\",\n    \"undefined\",\n    \"NaN\",\n    \"Infinity\"\n];\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\nconst TYPES = [\n    // Fundamental objects\n    \"Object\",\n    \"Function\",\n    \"Boolean\",\n    \"Symbol\",\n    // numbers and dates\n    \"Math\",\n    \"Date\",\n    \"Number\",\n    \"BigInt\",\n    // text\n    \"String\",\n    \"RegExp\",\n    // Indexed collections\n    \"Array\",\n    \"Float32Array\",\n    \"Float64Array\",\n    \"Int8Array\",\n    \"Uint8Array\",\n    \"Uint8ClampedArray\",\n    \"Int16Array\",\n    \"Int32Array\",\n    \"Uint16Array\",\n    \"Uint32Array\",\n    \"BigInt64Array\",\n    \"BigUint64Array\",\n    // Keyed collections\n    \"Set\",\n    \"Map\",\n    \"WeakSet\",\n    \"WeakMap\",\n    // Structured data\n    \"ArrayBuffer\",\n    \"SharedArrayBuffer\",\n    \"Atomics\",\n    \"DataView\",\n    \"JSON\",\n    // Control abstraction objects\n    \"Promise\",\n    \"Generator\",\n    \"GeneratorFunction\",\n    \"AsyncFunction\",\n    // Reflection\n    \"Reflect\",\n    \"Proxy\",\n    // Internationalization\n    \"Intl\",\n    // WebAssembly\n    \"WebAssembly\"\n];\nconst ERROR_TYPES = [\n    \"Error\",\n    \"EvalError\",\n    \"InternalError\",\n    \"RangeError\",\n    \"ReferenceError\",\n    \"SyntaxError\",\n    \"TypeError\",\n    \"URIError\"\n];\nconst BUILT_IN_GLOBALS = [\n    \"setInterval\",\n    \"setTimeout\",\n    \"clearInterval\",\n    \"clearTimeout\",\n    \"require\",\n    \"exports\",\n    \"eval\",\n    \"isFinite\",\n    \"isNaN\",\n    \"parseFloat\",\n    \"parseInt\",\n    \"decodeURI\",\n    \"decodeURIComponent\",\n    \"encodeURI\",\n    \"encodeURIComponent\",\n    \"escape\",\n    \"unescape\"\n];\nconst BUILT_IN_VARIABLES = [\n    \"arguments\",\n    \"this\",\n    \"super\",\n    \"console\",\n    \"window\",\n    \"document\",\n    \"localStorage\",\n    \"sessionStorage\",\n    \"module\",\n    \"global\" // Node.js\n];\nconst BUILT_INS = [].concat(BUILT_IN_GLOBALS, TYPES, ERROR_TYPES);\n/*\nLanguage: JavaScript\nDescription: JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions.\nCategory: common, scripting, web\nWebsite: https://developer.mozilla.org/en-US/docs/Web/JavaScript\n*/ /** @type LanguageFn */ function javascript(hljs) {\n    const regex = hljs.regex;\n    /**\n   * Takes a string like \"<Booger\" and checks to see\n   * if we can find a matching \"</Booger\" later in the\n   * content.\n   * @param {RegExpMatchArray} match\n   * @param {{after:number}} param1\n   */ const hasClosingTag = (match, { after })=>{\n        const tag = \"</\" + match[0].slice(1);\n        const pos = match.input.indexOf(tag, after);\n        return pos !== -1;\n    };\n    const IDENT_RE$1 = IDENT_RE;\n    const FRAGMENT = {\n        begin: \"<>\",\n        end: \"</>\"\n    };\n    // to avoid some special cases inside isTrulyOpeningTag\n    const XML_SELF_CLOSING = /<[A-Za-z0-9\\\\._:-]+\\s*\\/>/;\n    const XML_TAG = {\n        begin: /<[A-Za-z0-9\\\\._:-]+/,\n        end: /\\/[A-Za-z0-9\\\\._:-]+>|\\/>/,\n        /**\n     * @param {RegExpMatchArray} match\n     * @param {CallbackResponse} response\n     */ isTrulyOpeningTag: (match, response)=>{\n            const afterMatchIndex = match[0].length + match.index;\n            const nextChar = match.input[afterMatchIndex];\n            if (// HTML should not include another raw `<` inside a tag\n            // nested type?\n            // `<Array<Array<number>>`, etc.\n            nextChar === \"<\" || // the , gives away that this is not HTML\n            // `<T, A extends keyof T, V>`\n            nextChar === \",\") {\n                response.ignoreMatch();\n                return;\n            }\n            // `<something>`\n            // Quite possibly a tag, lets look for a matching closing tag...\n            if (nextChar === \">\") {\n                // if we cannot find a matching closing tag, then we\n                // will ignore it\n                if (!hasClosingTag(match, {\n                    after: afterMatchIndex\n                })) {\n                    response.ignoreMatch();\n                }\n            }\n            // `<blah />` (self-closing)\n            // handled by simpleSelfClosing rule\n            let m;\n            const afterMatch = match.input.substring(afterMatchIndex);\n            // some more template typing stuff\n            //  <T = any>(key?: string) => Modify<\n            if (m = afterMatch.match(/^\\s*=/)) {\n                response.ignoreMatch();\n                return;\n            }\n            // `<From extends string>`\n            // technically this could be HTML, but it smells like a type\n            // NOTE: This is ugh, but added specifically for https://github.com/highlightjs/highlight.js/issues/3276\n            if (m = afterMatch.match(/^\\s+extends\\s+/)) {\n                if (m.index === 0) {\n                    response.ignoreMatch();\n                    // eslint-disable-next-line no-useless-return\n                    return;\n                }\n            }\n        }\n    };\n    const KEYWORDS$1 = {\n        $pattern: IDENT_RE,\n        keyword: KEYWORDS,\n        literal: LITERALS,\n        built_in: BUILT_INS,\n        \"variable.language\": BUILT_IN_VARIABLES\n    };\n    // https://tc39.es/ecma262/#sec-literals-numeric-literals\n    const decimalDigits = \"[0-9](_?[0-9])*\";\n    const frac = `\\\\.(${decimalDigits})`;\n    // DecimalIntegerLiteral, including Annex B NonOctalDecimalIntegerLiteral\n    // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals\n    const decimalInteger = `0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*`;\n    const NUMBER = {\n        className: \"number\",\n        variants: [\n            // DecimalLiteral\n            {\n                begin: `(\\\\b(${decimalInteger})((${frac})|\\\\.)?|(${frac}))` + `[eE][+-]?(${decimalDigits})\\\\b`\n            },\n            {\n                begin: `\\\\b(${decimalInteger})\\\\b((${frac})\\\\b|\\\\.)?|(${frac})\\\\b`\n            },\n            // DecimalBigIntegerLiteral\n            {\n                begin: `\\\\b(0|[1-9](_?[0-9])*)n\\\\b`\n            },\n            // NonDecimalIntegerLiteral\n            {\n                begin: \"\\\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\\\b\"\n            },\n            {\n                begin: \"\\\\b0[bB][0-1](_?[0-1])*n?\\\\b\"\n            },\n            {\n                begin: \"\\\\b0[oO][0-7](_?[0-7])*n?\\\\b\"\n            },\n            // LegacyOctalIntegerLiteral (does not include underscore separators)\n            // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals\n            {\n                begin: \"\\\\b0[0-7]+n?\\\\b\"\n            }\n        ],\n        relevance: 0\n    };\n    const SUBST = {\n        className: \"subst\",\n        begin: \"\\\\$\\\\{\",\n        end: \"\\\\}\",\n        keywords: KEYWORDS$1,\n        contains: [] // defined later\n    };\n    const HTML_TEMPLATE = {\n        begin: \"html`\",\n        end: \"\",\n        starts: {\n            end: \"`\",\n            returnEnd: false,\n            contains: [\n                hljs.BACKSLASH_ESCAPE,\n                SUBST\n            ],\n            subLanguage: \"xml\"\n        }\n    };\n    const CSS_TEMPLATE = {\n        begin: \"css`\",\n        end: \"\",\n        starts: {\n            end: \"`\",\n            returnEnd: false,\n            contains: [\n                hljs.BACKSLASH_ESCAPE,\n                SUBST\n            ],\n            subLanguage: \"css\"\n        }\n    };\n    const GRAPHQL_TEMPLATE = {\n        begin: \"gql`\",\n        end: \"\",\n        starts: {\n            end: \"`\",\n            returnEnd: false,\n            contains: [\n                hljs.BACKSLASH_ESCAPE,\n                SUBST\n            ],\n            subLanguage: \"graphql\"\n        }\n    };\n    const TEMPLATE_STRING = {\n        className: \"string\",\n        begin: \"`\",\n        end: \"`\",\n        contains: [\n            hljs.BACKSLASH_ESCAPE,\n            SUBST\n        ]\n    };\n    const JSDOC_COMMENT = hljs.COMMENT(/\\/\\*\\*(?!\\/)/, \"\\\\*/\", {\n        relevance: 0,\n        contains: [\n            {\n                begin: \"(?=@[A-Za-z]+)\",\n                relevance: 0,\n                contains: [\n                    {\n                        className: \"doctag\",\n                        begin: \"@[A-Za-z]+\"\n                    },\n                    {\n                        className: \"type\",\n                        begin: \"\\\\{\",\n                        end: \"\\\\}\",\n                        excludeEnd: true,\n                        excludeBegin: true,\n                        relevance: 0\n                    },\n                    {\n                        className: \"variable\",\n                        begin: IDENT_RE$1 + \"(?=\\\\s*(-)|$)\",\n                        endsParent: true,\n                        relevance: 0\n                    },\n                    // eat spaces (not newlines) so we can find\n                    // types or variables\n                    {\n                        begin: /(?=[^\\n])\\s/,\n                        relevance: 0\n                    }\n                ]\n            }\n        ]\n    });\n    const COMMENT = {\n        className: \"comment\",\n        variants: [\n            JSDOC_COMMENT,\n            hljs.C_BLOCK_COMMENT_MODE,\n            hljs.C_LINE_COMMENT_MODE\n        ]\n    };\n    const SUBST_INTERNALS = [\n        hljs.APOS_STRING_MODE,\n        hljs.QUOTE_STRING_MODE,\n        HTML_TEMPLATE,\n        CSS_TEMPLATE,\n        GRAPHQL_TEMPLATE,\n        TEMPLATE_STRING,\n        // Skip numbers when they are part of a variable name\n        {\n            match: /\\$\\d+/\n        },\n        NUMBER\n    ];\n    SUBST.contains = SUBST_INTERNALS.concat({\n        // we need to pair up {} inside our subst to prevent\n        // it from ending too early by matching another }\n        begin: /\\{/,\n        end: /\\}/,\n        keywords: KEYWORDS$1,\n        contains: [\n            \"self\"\n        ].concat(SUBST_INTERNALS)\n    });\n    const SUBST_AND_COMMENTS = [].concat(COMMENT, SUBST.contains);\n    const PARAMS_CONTAINS = SUBST_AND_COMMENTS.concat([\n        // eat recursive parens in sub expressions\n        {\n            begin: /\\(/,\n            end: /\\)/,\n            keywords: KEYWORDS$1,\n            contains: [\n                \"self\"\n            ].concat(SUBST_AND_COMMENTS)\n        }\n    ]);\n    const PARAMS = {\n        className: \"params\",\n        begin: /\\(/,\n        end: /\\)/,\n        excludeBegin: true,\n        excludeEnd: true,\n        keywords: KEYWORDS$1,\n        contains: PARAMS_CONTAINS\n    };\n    // ES6 classes\n    const CLASS_OR_EXTENDS = {\n        variants: [\n            // class Car extends vehicle\n            {\n                match: [\n                    /class/,\n                    /\\s+/,\n                    IDENT_RE$1,\n                    /\\s+/,\n                    /extends/,\n                    /\\s+/,\n                    regex.concat(IDENT_RE$1, \"(\", regex.concat(/\\./, IDENT_RE$1), \")*\")\n                ],\n                scope: {\n                    1: \"keyword\",\n                    3: \"title.class\",\n                    5: \"keyword\",\n                    7: \"title.class.inherited\"\n                }\n            },\n            // class Car\n            {\n                match: [\n                    /class/,\n                    /\\s+/,\n                    IDENT_RE$1\n                ],\n                scope: {\n                    1: \"keyword\",\n                    3: \"title.class\"\n                }\n            }\n        ]\n    };\n    const CLASS_REFERENCE = {\n        relevance: 0,\n        match: regex.either(// Hard coded exceptions\n        /\\bJSON/, // Float32Array, OutT\n        /\\b[A-Z][a-z]+([A-Z][a-z]*|\\d)*/, // CSSFactory, CSSFactoryT\n        /\\b[A-Z]{2,}([A-Z][a-z]+|\\d)+([A-Z][a-z]*)*/, // FPs, FPsT\n        /\\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\\d)*([A-Z][a-z]*)*/),\n        className: \"title.class\",\n        keywords: {\n            _: [\n                // se we still get relevance credit for JS library classes\n                ...TYPES,\n                ...ERROR_TYPES\n            ]\n        }\n    };\n    const USE_STRICT = {\n        label: \"use_strict\",\n        className: \"meta\",\n        relevance: 10,\n        begin: /^\\s*['\"]use (strict|asm)['\"]/\n    };\n    const FUNCTION_DEFINITION = {\n        variants: [\n            {\n                match: [\n                    /function/,\n                    /\\s+/,\n                    IDENT_RE$1,\n                    /(?=\\s*\\()/\n                ]\n            },\n            // anonymous function\n            {\n                match: [\n                    /function/,\n                    /\\s*(?=\\()/\n                ]\n            }\n        ],\n        className: {\n            1: \"keyword\",\n            3: \"title.function\"\n        },\n        label: \"func.def\",\n        contains: [\n            PARAMS\n        ],\n        illegal: /%/\n    };\n    const UPPER_CASE_CONSTANT = {\n        relevance: 0,\n        match: /\\b[A-Z][A-Z_0-9]+\\b/,\n        className: \"variable.constant\"\n    };\n    function noneOf(list) {\n        return regex.concat(\"(?!\", list.join(\"|\"), \")\");\n    }\n    const FUNCTION_CALL = {\n        match: regex.concat(/\\b/, noneOf([\n            ...BUILT_IN_GLOBALS,\n            \"super\",\n            \"import\"\n        ]), IDENT_RE$1, regex.lookahead(/\\(/)),\n        className: \"title.function\",\n        relevance: 0\n    };\n    const PROPERTY_ACCESS = {\n        begin: regex.concat(/\\./, regex.lookahead(regex.concat(IDENT_RE$1, /(?![0-9A-Za-z$_(])/))),\n        end: IDENT_RE$1,\n        excludeBegin: true,\n        keywords: \"prototype\",\n        className: \"property\",\n        relevance: 0\n    };\n    const GETTER_OR_SETTER = {\n        match: [\n            /get|set/,\n            /\\s+/,\n            IDENT_RE$1,\n            /(?=\\()/\n        ],\n        className: {\n            1: \"keyword\",\n            3: \"title.function\"\n        },\n        contains: [\n            {\n                begin: /\\(\\)/\n            },\n            PARAMS\n        ]\n    };\n    const FUNC_LEAD_IN_RE = \"(\\\\(\" + \"[^()]*(\\\\(\" + \"[^()]*(\\\\(\" + \"[^()]*\" + \"\\\\)[^()]*)*\" + \"\\\\)[^()]*)*\" + \"\\\\)|\" + hljs.UNDERSCORE_IDENT_RE + \")\\\\s*=>\";\n    const FUNCTION_VARIABLE = {\n        match: [\n            /const|var|let/,\n            /\\s+/,\n            IDENT_RE$1,\n            /\\s*/,\n            /=\\s*/,\n            /(async\\s*)?/,\n            regex.lookahead(FUNC_LEAD_IN_RE)\n        ],\n        keywords: \"async\",\n        className: {\n            1: \"keyword\",\n            3: \"title.function\"\n        },\n        contains: [\n            PARAMS\n        ]\n    };\n    return {\n        name: \"JavaScript\",\n        aliases: [\n            \"js\",\n            \"jsx\",\n            \"mjs\",\n            \"cjs\"\n        ],\n        keywords: KEYWORDS$1,\n        // this will be extended by TypeScript\n        exports: {\n            PARAMS_CONTAINS,\n            CLASS_REFERENCE\n        },\n        illegal: /#(?![$_A-z])/,\n        contains: [\n            hljs.SHEBANG({\n                label: \"shebang\",\n                binary: \"node\",\n                relevance: 5\n            }),\n            USE_STRICT,\n            hljs.APOS_STRING_MODE,\n            hljs.QUOTE_STRING_MODE,\n            HTML_TEMPLATE,\n            CSS_TEMPLATE,\n            GRAPHQL_TEMPLATE,\n            TEMPLATE_STRING,\n            COMMENT,\n            // Skip numbers when they are part of a variable name\n            {\n                match: /\\$\\d+/\n            },\n            NUMBER,\n            CLASS_REFERENCE,\n            {\n                className: \"attr\",\n                begin: IDENT_RE$1 + regex.lookahead(\":\"),\n                relevance: 0\n            },\n            FUNCTION_VARIABLE,\n            {\n                begin: \"(\" + hljs.RE_STARTERS_RE + \"|\\\\b(case|return|throw)\\\\b)\\\\s*\",\n                keywords: \"return throw case\",\n                relevance: 0,\n                contains: [\n                    COMMENT,\n                    hljs.REGEXP_MODE,\n                    {\n                        className: \"function\",\n                        // we have to count the parens to make sure we actually have the\n                        // correct bounding ( ) before the =>.  There could be any number of\n                        // sub-expressions inside also surrounded by parens.\n                        begin: FUNC_LEAD_IN_RE,\n                        returnBegin: true,\n                        end: \"\\\\s*=>\",\n                        contains: [\n                            {\n                                className: \"params\",\n                                variants: [\n                                    {\n                                        begin: hljs.UNDERSCORE_IDENT_RE,\n                                        relevance: 0\n                                    },\n                                    {\n                                        className: null,\n                                        begin: /\\(\\s*\\)/,\n                                        skip: true\n                                    },\n                                    {\n                                        begin: /\\(/,\n                                        end: /\\)/,\n                                        excludeBegin: true,\n                                        excludeEnd: true,\n                                        keywords: KEYWORDS$1,\n                                        contains: PARAMS_CONTAINS\n                                    }\n                                ]\n                            }\n                        ]\n                    },\n                    {\n                        begin: /,/,\n                        relevance: 0\n                    },\n                    {\n                        match: /\\s+/,\n                        relevance: 0\n                    },\n                    {\n                        variants: [\n                            {\n                                begin: FRAGMENT.begin,\n                                end: FRAGMENT.end\n                            },\n                            {\n                                match: XML_SELF_CLOSING\n                            },\n                            {\n                                begin: XML_TAG.begin,\n                                // we carefully check the opening tag to see if it truly\n                                // is a tag and not a false positive\n                                \"on:begin\": XML_TAG.isTrulyOpeningTag,\n                                end: XML_TAG.end\n                            }\n                        ],\n                        subLanguage: \"xml\",\n                        contains: [\n                            {\n                                begin: XML_TAG.begin,\n                                end: XML_TAG.end,\n                                skip: true,\n                                contains: [\n                                    \"self\"\n                                ]\n                            }\n                        ]\n                    }\n                ]\n            },\n            FUNCTION_DEFINITION,\n            {\n                // prevent this from getting swallowed up by function\n                // since they appear \"function like\"\n                beginKeywords: \"while if switch catch for\"\n            },\n            {\n                // we have to count the parens to make sure we actually have the correct\n                // bounding ( ).  There could be any number of sub-expressions inside\n                // also surrounded by parens.\n                begin: \"\\\\b(?!function)\" + hljs.UNDERSCORE_IDENT_RE + \"\\\\(\" + // first parens\n                \"[^()]*(\\\\(\" + \"[^()]*(\\\\(\" + \"[^()]*\" + \"\\\\)[^()]*)*\" + \"\\\\)[^()]*)*\" + \"\\\\)\\\\s*\\\\{\",\n                returnBegin: true,\n                label: \"func.def\",\n                contains: [\n                    PARAMS,\n                    hljs.inherit(hljs.TITLE_MODE, {\n                        begin: IDENT_RE$1,\n                        className: \"title.function\"\n                    })\n                ]\n            },\n            // catch ... so it won't trigger the property rule below\n            {\n                match: /\\.\\.\\./,\n                relevance: 0\n            },\n            PROPERTY_ACCESS,\n            // hack: prevents detection of keywords in some circumstances\n            // .keyword()\n            // $keyword = x\n            {\n                match: \"\\\\$\" + IDENT_RE$1,\n                relevance: 0\n            },\n            {\n                match: [\n                    /\\bconstructor(?=\\s*\\()/\n                ],\n                className: {\n                    1: \"title.function\"\n                },\n                contains: [\n                    PARAMS\n                ]\n            },\n            FUNCTION_CALL,\n            UPPER_CASE_CONSTANT,\n            CLASS_OR_EXTENDS,\n            GETTER_OR_SETTER,\n            {\n                match: /\\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`\n            }\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/javascript.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/typescript.js":
/*!**************************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/typescript.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ typescript)\n/* harmony export */ });\nconst IDENT_RE = \"[A-Za-z$_][0-9A-Za-z$_]*\";\nconst KEYWORDS = [\n    \"as\",\n    \"in\",\n    \"of\",\n    \"if\",\n    \"for\",\n    \"while\",\n    \"finally\",\n    \"var\",\n    \"new\",\n    \"function\",\n    \"do\",\n    \"return\",\n    \"void\",\n    \"else\",\n    \"break\",\n    \"catch\",\n    \"instanceof\",\n    \"with\",\n    \"throw\",\n    \"case\",\n    \"default\",\n    \"try\",\n    \"switch\",\n    \"continue\",\n    \"typeof\",\n    \"delete\",\n    \"let\",\n    \"yield\",\n    \"const\",\n    \"class\",\n    // JS handles these with a special rule\n    // \"get\",\n    // \"set\",\n    \"debugger\",\n    \"async\",\n    \"await\",\n    \"static\",\n    \"import\",\n    \"from\",\n    \"export\",\n    \"extends\"\n];\nconst LITERALS = [\n    \"true\",\n    \"false\",\n    \"null\",\n    \"undefined\",\n    \"NaN\",\n    \"Infinity\"\n];\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\nconst TYPES = [\n    // Fundamental objects\n    \"Object\",\n    \"Function\",\n    \"Boolean\",\n    \"Symbol\",\n    // numbers and dates\n    \"Math\",\n    \"Date\",\n    \"Number\",\n    \"BigInt\",\n    // text\n    \"String\",\n    \"RegExp\",\n    // Indexed collections\n    \"Array\",\n    \"Float32Array\",\n    \"Float64Array\",\n    \"Int8Array\",\n    \"Uint8Array\",\n    \"Uint8ClampedArray\",\n    \"Int16Array\",\n    \"Int32Array\",\n    \"Uint16Array\",\n    \"Uint32Array\",\n    \"BigInt64Array\",\n    \"BigUint64Array\",\n    // Keyed collections\n    \"Set\",\n    \"Map\",\n    \"WeakSet\",\n    \"WeakMap\",\n    // Structured data\n    \"ArrayBuffer\",\n    \"SharedArrayBuffer\",\n    \"Atomics\",\n    \"DataView\",\n    \"JSON\",\n    // Control abstraction objects\n    \"Promise\",\n    \"Generator\",\n    \"GeneratorFunction\",\n    \"AsyncFunction\",\n    // Reflection\n    \"Reflect\",\n    \"Proxy\",\n    // Internationalization\n    \"Intl\",\n    // WebAssembly\n    \"WebAssembly\"\n];\nconst ERROR_TYPES = [\n    \"Error\",\n    \"EvalError\",\n    \"InternalError\",\n    \"RangeError\",\n    \"ReferenceError\",\n    \"SyntaxError\",\n    \"TypeError\",\n    \"URIError\"\n];\nconst BUILT_IN_GLOBALS = [\n    \"setInterval\",\n    \"setTimeout\",\n    \"clearInterval\",\n    \"clearTimeout\",\n    \"require\",\n    \"exports\",\n    \"eval\",\n    \"isFinite\",\n    \"isNaN\",\n    \"parseFloat\",\n    \"parseInt\",\n    \"decodeURI\",\n    \"decodeURIComponent\",\n    \"encodeURI\",\n    \"encodeURIComponent\",\n    \"escape\",\n    \"unescape\"\n];\nconst BUILT_IN_VARIABLES = [\n    \"arguments\",\n    \"this\",\n    \"super\",\n    \"console\",\n    \"window\",\n    \"document\",\n    \"localStorage\",\n    \"sessionStorage\",\n    \"module\",\n    \"global\" // Node.js\n];\nconst BUILT_INS = [].concat(BUILT_IN_GLOBALS, TYPES, ERROR_TYPES);\n/*\nLanguage: JavaScript\nDescription: JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions.\nCategory: common, scripting, web\nWebsite: https://developer.mozilla.org/en-US/docs/Web/JavaScript\n*/ /** @type LanguageFn */ function javascript(hljs) {\n    const regex = hljs.regex;\n    /**\n   * Takes a string like \"<Booger\" and checks to see\n   * if we can find a matching \"</Booger\" later in the\n   * content.\n   * @param {RegExpMatchArray} match\n   * @param {{after:number}} param1\n   */ const hasClosingTag = (match, { after })=>{\n        const tag = \"</\" + match[0].slice(1);\n        const pos = match.input.indexOf(tag, after);\n        return pos !== -1;\n    };\n    const IDENT_RE$1 = IDENT_RE;\n    const FRAGMENT = {\n        begin: \"<>\",\n        end: \"</>\"\n    };\n    // to avoid some special cases inside isTrulyOpeningTag\n    const XML_SELF_CLOSING = /<[A-Za-z0-9\\\\._:-]+\\s*\\/>/;\n    const XML_TAG = {\n        begin: /<[A-Za-z0-9\\\\._:-]+/,\n        end: /\\/[A-Za-z0-9\\\\._:-]+>|\\/>/,\n        /**\n     * @param {RegExpMatchArray} match\n     * @param {CallbackResponse} response\n     */ isTrulyOpeningTag: (match, response)=>{\n            const afterMatchIndex = match[0].length + match.index;\n            const nextChar = match.input[afterMatchIndex];\n            if (// HTML should not include another raw `<` inside a tag\n            // nested type?\n            // `<Array<Array<number>>`, etc.\n            nextChar === \"<\" || // the , gives away that this is not HTML\n            // `<T, A extends keyof T, V>`\n            nextChar === \",\") {\n                response.ignoreMatch();\n                return;\n            }\n            // `<something>`\n            // Quite possibly a tag, lets look for a matching closing tag...\n            if (nextChar === \">\") {\n                // if we cannot find a matching closing tag, then we\n                // will ignore it\n                if (!hasClosingTag(match, {\n                    after: afterMatchIndex\n                })) {\n                    response.ignoreMatch();\n                }\n            }\n            // `<blah />` (self-closing)\n            // handled by simpleSelfClosing rule\n            let m;\n            const afterMatch = match.input.substring(afterMatchIndex);\n            // some more template typing stuff\n            //  <T = any>(key?: string) => Modify<\n            if (m = afterMatch.match(/^\\s*=/)) {\n                response.ignoreMatch();\n                return;\n            }\n            // `<From extends string>`\n            // technically this could be HTML, but it smells like a type\n            // NOTE: This is ugh, but added specifically for https://github.com/highlightjs/highlight.js/issues/3276\n            if (m = afterMatch.match(/^\\s+extends\\s+/)) {\n                if (m.index === 0) {\n                    response.ignoreMatch();\n                    // eslint-disable-next-line no-useless-return\n                    return;\n                }\n            }\n        }\n    };\n    const KEYWORDS$1 = {\n        $pattern: IDENT_RE,\n        keyword: KEYWORDS,\n        literal: LITERALS,\n        built_in: BUILT_INS,\n        \"variable.language\": BUILT_IN_VARIABLES\n    };\n    // https://tc39.es/ecma262/#sec-literals-numeric-literals\n    const decimalDigits = \"[0-9](_?[0-9])*\";\n    const frac = `\\\\.(${decimalDigits})`;\n    // DecimalIntegerLiteral, including Annex B NonOctalDecimalIntegerLiteral\n    // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals\n    const decimalInteger = `0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*`;\n    const NUMBER = {\n        className: \"number\",\n        variants: [\n            // DecimalLiteral\n            {\n                begin: `(\\\\b(${decimalInteger})((${frac})|\\\\.)?|(${frac}))` + `[eE][+-]?(${decimalDigits})\\\\b`\n            },\n            {\n                begin: `\\\\b(${decimalInteger})\\\\b((${frac})\\\\b|\\\\.)?|(${frac})\\\\b`\n            },\n            // DecimalBigIntegerLiteral\n            {\n                begin: `\\\\b(0|[1-9](_?[0-9])*)n\\\\b`\n            },\n            // NonDecimalIntegerLiteral\n            {\n                begin: \"\\\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\\\b\"\n            },\n            {\n                begin: \"\\\\b0[bB][0-1](_?[0-1])*n?\\\\b\"\n            },\n            {\n                begin: \"\\\\b0[oO][0-7](_?[0-7])*n?\\\\b\"\n            },\n            // LegacyOctalIntegerLiteral (does not include underscore separators)\n            // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals\n            {\n                begin: \"\\\\b0[0-7]+n?\\\\b\"\n            }\n        ],\n        relevance: 0\n    };\n    const SUBST = {\n        className: \"subst\",\n        begin: \"\\\\$\\\\{\",\n        end: \"\\\\}\",\n        keywords: KEYWORDS$1,\n        contains: [] // defined later\n    };\n    const HTML_TEMPLATE = {\n        begin: \"html`\",\n        end: \"\",\n        starts: {\n            end: \"`\",\n            returnEnd: false,\n            contains: [\n                hljs.BACKSLASH_ESCAPE,\n                SUBST\n            ],\n            subLanguage: \"xml\"\n        }\n    };\n    const CSS_TEMPLATE = {\n        begin: \"css`\",\n        end: \"\",\n        starts: {\n            end: \"`\",\n            returnEnd: false,\n            contains: [\n                hljs.BACKSLASH_ESCAPE,\n                SUBST\n            ],\n            subLanguage: \"css\"\n        }\n    };\n    const GRAPHQL_TEMPLATE = {\n        begin: \"gql`\",\n        end: \"\",\n        starts: {\n            end: \"`\",\n            returnEnd: false,\n            contains: [\n                hljs.BACKSLASH_ESCAPE,\n                SUBST\n            ],\n            subLanguage: \"graphql\"\n        }\n    };\n    const TEMPLATE_STRING = {\n        className: \"string\",\n        begin: \"`\",\n        end: \"`\",\n        contains: [\n            hljs.BACKSLASH_ESCAPE,\n            SUBST\n        ]\n    };\n    const JSDOC_COMMENT = hljs.COMMENT(/\\/\\*\\*(?!\\/)/, \"\\\\*/\", {\n        relevance: 0,\n        contains: [\n            {\n                begin: \"(?=@[A-Za-z]+)\",\n                relevance: 0,\n                contains: [\n                    {\n                        className: \"doctag\",\n                        begin: \"@[A-Za-z]+\"\n                    },\n                    {\n                        className: \"type\",\n                        begin: \"\\\\{\",\n                        end: \"\\\\}\",\n                        excludeEnd: true,\n                        excludeBegin: true,\n                        relevance: 0\n                    },\n                    {\n                        className: \"variable\",\n                        begin: IDENT_RE$1 + \"(?=\\\\s*(-)|$)\",\n                        endsParent: true,\n                        relevance: 0\n                    },\n                    // eat spaces (not newlines) so we can find\n                    // types or variables\n                    {\n                        begin: /(?=[^\\n])\\s/,\n                        relevance: 0\n                    }\n                ]\n            }\n        ]\n    });\n    const COMMENT = {\n        className: \"comment\",\n        variants: [\n            JSDOC_COMMENT,\n            hljs.C_BLOCK_COMMENT_MODE,\n            hljs.C_LINE_COMMENT_MODE\n        ]\n    };\n    const SUBST_INTERNALS = [\n        hljs.APOS_STRING_MODE,\n        hljs.QUOTE_STRING_MODE,\n        HTML_TEMPLATE,\n        CSS_TEMPLATE,\n        GRAPHQL_TEMPLATE,\n        TEMPLATE_STRING,\n        // Skip numbers when they are part of a variable name\n        {\n            match: /\\$\\d+/\n        },\n        NUMBER\n    ];\n    SUBST.contains = SUBST_INTERNALS.concat({\n        // we need to pair up {} inside our subst to prevent\n        // it from ending too early by matching another }\n        begin: /\\{/,\n        end: /\\}/,\n        keywords: KEYWORDS$1,\n        contains: [\n            \"self\"\n        ].concat(SUBST_INTERNALS)\n    });\n    const SUBST_AND_COMMENTS = [].concat(COMMENT, SUBST.contains);\n    const PARAMS_CONTAINS = SUBST_AND_COMMENTS.concat([\n        // eat recursive parens in sub expressions\n        {\n            begin: /\\(/,\n            end: /\\)/,\n            keywords: KEYWORDS$1,\n            contains: [\n                \"self\"\n            ].concat(SUBST_AND_COMMENTS)\n        }\n    ]);\n    const PARAMS = {\n        className: \"params\",\n        begin: /\\(/,\n        end: /\\)/,\n        excludeBegin: true,\n        excludeEnd: true,\n        keywords: KEYWORDS$1,\n        contains: PARAMS_CONTAINS\n    };\n    // ES6 classes\n    const CLASS_OR_EXTENDS = {\n        variants: [\n            // class Car extends vehicle\n            {\n                match: [\n                    /class/,\n                    /\\s+/,\n                    IDENT_RE$1,\n                    /\\s+/,\n                    /extends/,\n                    /\\s+/,\n                    regex.concat(IDENT_RE$1, \"(\", regex.concat(/\\./, IDENT_RE$1), \")*\")\n                ],\n                scope: {\n                    1: \"keyword\",\n                    3: \"title.class\",\n                    5: \"keyword\",\n                    7: \"title.class.inherited\"\n                }\n            },\n            // class Car\n            {\n                match: [\n                    /class/,\n                    /\\s+/,\n                    IDENT_RE$1\n                ],\n                scope: {\n                    1: \"keyword\",\n                    3: \"title.class\"\n                }\n            }\n        ]\n    };\n    const CLASS_REFERENCE = {\n        relevance: 0,\n        match: regex.either(// Hard coded exceptions\n        /\\bJSON/, // Float32Array, OutT\n        /\\b[A-Z][a-z]+([A-Z][a-z]*|\\d)*/, // CSSFactory, CSSFactoryT\n        /\\b[A-Z]{2,}([A-Z][a-z]+|\\d)+([A-Z][a-z]*)*/, // FPs, FPsT\n        /\\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\\d)*([A-Z][a-z]*)*/),\n        className: \"title.class\",\n        keywords: {\n            _: [\n                // se we still get relevance credit for JS library classes\n                ...TYPES,\n                ...ERROR_TYPES\n            ]\n        }\n    };\n    const USE_STRICT = {\n        label: \"use_strict\",\n        className: \"meta\",\n        relevance: 10,\n        begin: /^\\s*['\"]use (strict|asm)['\"]/\n    };\n    const FUNCTION_DEFINITION = {\n        variants: [\n            {\n                match: [\n                    /function/,\n                    /\\s+/,\n                    IDENT_RE$1,\n                    /(?=\\s*\\()/\n                ]\n            },\n            // anonymous function\n            {\n                match: [\n                    /function/,\n                    /\\s*(?=\\()/\n                ]\n            }\n        ],\n        className: {\n            1: \"keyword\",\n            3: \"title.function\"\n        },\n        label: \"func.def\",\n        contains: [\n            PARAMS\n        ],\n        illegal: /%/\n    };\n    const UPPER_CASE_CONSTANT = {\n        relevance: 0,\n        match: /\\b[A-Z][A-Z_0-9]+\\b/,\n        className: \"variable.constant\"\n    };\n    function noneOf(list) {\n        return regex.concat(\"(?!\", list.join(\"|\"), \")\");\n    }\n    const FUNCTION_CALL = {\n        match: regex.concat(/\\b/, noneOf([\n            ...BUILT_IN_GLOBALS,\n            \"super\",\n            \"import\"\n        ]), IDENT_RE$1, regex.lookahead(/\\(/)),\n        className: \"title.function\",\n        relevance: 0\n    };\n    const PROPERTY_ACCESS = {\n        begin: regex.concat(/\\./, regex.lookahead(regex.concat(IDENT_RE$1, /(?![0-9A-Za-z$_(])/))),\n        end: IDENT_RE$1,\n        excludeBegin: true,\n        keywords: \"prototype\",\n        className: \"property\",\n        relevance: 0\n    };\n    const GETTER_OR_SETTER = {\n        match: [\n            /get|set/,\n            /\\s+/,\n            IDENT_RE$1,\n            /(?=\\()/\n        ],\n        className: {\n            1: \"keyword\",\n            3: \"title.function\"\n        },\n        contains: [\n            {\n                begin: /\\(\\)/\n            },\n            PARAMS\n        ]\n    };\n    const FUNC_LEAD_IN_RE = \"(\\\\(\" + \"[^()]*(\\\\(\" + \"[^()]*(\\\\(\" + \"[^()]*\" + \"\\\\)[^()]*)*\" + \"\\\\)[^()]*)*\" + \"\\\\)|\" + hljs.UNDERSCORE_IDENT_RE + \")\\\\s*=>\";\n    const FUNCTION_VARIABLE = {\n        match: [\n            /const|var|let/,\n            /\\s+/,\n            IDENT_RE$1,\n            /\\s*/,\n            /=\\s*/,\n            /(async\\s*)?/,\n            regex.lookahead(FUNC_LEAD_IN_RE)\n        ],\n        keywords: \"async\",\n        className: {\n            1: \"keyword\",\n            3: \"title.function\"\n        },\n        contains: [\n            PARAMS\n        ]\n    };\n    return {\n        name: \"JavaScript\",\n        aliases: [\n            \"js\",\n            \"jsx\",\n            \"mjs\",\n            \"cjs\"\n        ],\n        keywords: KEYWORDS$1,\n        // this will be extended by TypeScript\n        exports: {\n            PARAMS_CONTAINS,\n            CLASS_REFERENCE\n        },\n        illegal: /#(?![$_A-z])/,\n        contains: [\n            hljs.SHEBANG({\n                label: \"shebang\",\n                binary: \"node\",\n                relevance: 5\n            }),\n            USE_STRICT,\n            hljs.APOS_STRING_MODE,\n            hljs.QUOTE_STRING_MODE,\n            HTML_TEMPLATE,\n            CSS_TEMPLATE,\n            GRAPHQL_TEMPLATE,\n            TEMPLATE_STRING,\n            COMMENT,\n            // Skip numbers when they are part of a variable name\n            {\n                match: /\\$\\d+/\n            },\n            NUMBER,\n            CLASS_REFERENCE,\n            {\n                className: \"attr\",\n                begin: IDENT_RE$1 + regex.lookahead(\":\"),\n                relevance: 0\n            },\n            FUNCTION_VARIABLE,\n            {\n                begin: \"(\" + hljs.RE_STARTERS_RE + \"|\\\\b(case|return|throw)\\\\b)\\\\s*\",\n                keywords: \"return throw case\",\n                relevance: 0,\n                contains: [\n                    COMMENT,\n                    hljs.REGEXP_MODE,\n                    {\n                        className: \"function\",\n                        // we have to count the parens to make sure we actually have the\n                        // correct bounding ( ) before the =>.  There could be any number of\n                        // sub-expressions inside also surrounded by parens.\n                        begin: FUNC_LEAD_IN_RE,\n                        returnBegin: true,\n                        end: \"\\\\s*=>\",\n                        contains: [\n                            {\n                                className: \"params\",\n                                variants: [\n                                    {\n                                        begin: hljs.UNDERSCORE_IDENT_RE,\n                                        relevance: 0\n                                    },\n                                    {\n                                        className: null,\n                                        begin: /\\(\\s*\\)/,\n                                        skip: true\n                                    },\n                                    {\n                                        begin: /\\(/,\n                                        end: /\\)/,\n                                        excludeBegin: true,\n                                        excludeEnd: true,\n                                        keywords: KEYWORDS$1,\n                                        contains: PARAMS_CONTAINS\n                                    }\n                                ]\n                            }\n                        ]\n                    },\n                    {\n                        begin: /,/,\n                        relevance: 0\n                    },\n                    {\n                        match: /\\s+/,\n                        relevance: 0\n                    },\n                    {\n                        variants: [\n                            {\n                                begin: FRAGMENT.begin,\n                                end: FRAGMENT.end\n                            },\n                            {\n                                match: XML_SELF_CLOSING\n                            },\n                            {\n                                begin: XML_TAG.begin,\n                                // we carefully check the opening tag to see if it truly\n                                // is a tag and not a false positive\n                                \"on:begin\": XML_TAG.isTrulyOpeningTag,\n                                end: XML_TAG.end\n                            }\n                        ],\n                        subLanguage: \"xml\",\n                        contains: [\n                            {\n                                begin: XML_TAG.begin,\n                                end: XML_TAG.end,\n                                skip: true,\n                                contains: [\n                                    \"self\"\n                                ]\n                            }\n                        ]\n                    }\n                ]\n            },\n            FUNCTION_DEFINITION,\n            {\n                // prevent this from getting swallowed up by function\n                // since they appear \"function like\"\n                beginKeywords: \"while if switch catch for\"\n            },\n            {\n                // we have to count the parens to make sure we actually have the correct\n                // bounding ( ).  There could be any number of sub-expressions inside\n                // also surrounded by parens.\n                begin: \"\\\\b(?!function)\" + hljs.UNDERSCORE_IDENT_RE + \"\\\\(\" + // first parens\n                \"[^()]*(\\\\(\" + \"[^()]*(\\\\(\" + \"[^()]*\" + \"\\\\)[^()]*)*\" + \"\\\\)[^()]*)*\" + \"\\\\)\\\\s*\\\\{\",\n                returnBegin: true,\n                label: \"func.def\",\n                contains: [\n                    PARAMS,\n                    hljs.inherit(hljs.TITLE_MODE, {\n                        begin: IDENT_RE$1,\n                        className: \"title.function\"\n                    })\n                ]\n            },\n            // catch ... so it won't trigger the property rule below\n            {\n                match: /\\.\\.\\./,\n                relevance: 0\n            },\n            PROPERTY_ACCESS,\n            // hack: prevents detection of keywords in some circumstances\n            // .keyword()\n            // $keyword = x\n            {\n                match: \"\\\\$\" + IDENT_RE$1,\n                relevance: 0\n            },\n            {\n                match: [\n                    /\\bconstructor(?=\\s*\\()/\n                ],\n                className: {\n                    1: \"title.function\"\n                },\n                contains: [\n                    PARAMS\n                ]\n            },\n            FUNCTION_CALL,\n            UPPER_CASE_CONSTANT,\n            CLASS_OR_EXTENDS,\n            GETTER_OR_SETTER,\n            {\n                match: /\\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`\n            }\n        ]\n    };\n}\n/*\nLanguage: TypeScript\nAuthor: Panu Horsmalahti <panu.horsmalahti@iki.fi>\nContributors: Ike Ku <dempfi@yahoo.com>\nDescription: TypeScript is a strict superset of JavaScript\nWebsite: https://www.typescriptlang.org\nCategory: common, scripting\n*/ /** @type LanguageFn */ function typescript(hljs) {\n    const tsLanguage = javascript(hljs);\n    const IDENT_RE$1 = IDENT_RE;\n    const TYPES = [\n        \"any\",\n        \"void\",\n        \"number\",\n        \"boolean\",\n        \"string\",\n        \"object\",\n        \"never\",\n        \"symbol\",\n        \"bigint\",\n        \"unknown\"\n    ];\n    const NAMESPACE = {\n        beginKeywords: \"namespace\",\n        end: /\\{/,\n        excludeEnd: true,\n        contains: [\n            tsLanguage.exports.CLASS_REFERENCE\n        ]\n    };\n    const INTERFACE = {\n        beginKeywords: \"interface\",\n        end: /\\{/,\n        excludeEnd: true,\n        keywords: {\n            keyword: \"interface extends\",\n            built_in: TYPES\n        },\n        contains: [\n            tsLanguage.exports.CLASS_REFERENCE\n        ]\n    };\n    const USE_STRICT = {\n        className: \"meta\",\n        relevance: 10,\n        begin: /^\\s*['\"]use strict['\"]/\n    };\n    const TS_SPECIFIC_KEYWORDS = [\n        \"type\",\n        \"namespace\",\n        \"interface\",\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"implements\",\n        \"declare\",\n        \"abstract\",\n        \"readonly\",\n        \"enum\",\n        \"override\"\n    ];\n    const KEYWORDS$1 = {\n        $pattern: IDENT_RE,\n        keyword: KEYWORDS.concat(TS_SPECIFIC_KEYWORDS),\n        literal: LITERALS,\n        built_in: BUILT_INS.concat(TYPES),\n        \"variable.language\": BUILT_IN_VARIABLES\n    };\n    const DECORATOR = {\n        className: \"meta\",\n        begin: \"@\" + IDENT_RE$1\n    };\n    const swapMode = (mode, label, replacement)=>{\n        const indx = mode.contains.findIndex((m)=>m.label === label);\n        if (indx === -1) {\n            throw new Error(\"can not find mode to replace\");\n        }\n        mode.contains.splice(indx, 1, replacement);\n    };\n    // this should update anywhere keywords is used since\n    // it will be the same actual JS object\n    Object.assign(tsLanguage.keywords, KEYWORDS$1);\n    tsLanguage.exports.PARAMS_CONTAINS.push(DECORATOR);\n    tsLanguage.contains = tsLanguage.contains.concat([\n        DECORATOR,\n        NAMESPACE,\n        INTERFACE\n    ]);\n    // TS gets a simpler shebang rule than JS\n    swapMode(tsLanguage, \"shebang\", hljs.SHEBANG());\n    // JS use strict rule purposely excludes `asm` which makes no sense\n    swapMode(tsLanguage, \"use_strict\", USE_STRICT);\n    const functionDeclaration = tsLanguage.contains.find((m)=>m.label === \"func.def\");\n    functionDeclaration.relevance = 0; // () => {} is more typical in TypeScript\n    Object.assign(tsLanguage, {\n        name: \"TypeScript\",\n        aliases: [\n            \"ts\",\n            \"tsx\",\n            \"mts\",\n            \"cts\"\n        ]\n    });\n    return tsLanguage;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/typescript.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/highlight.js/es/languages/xml.js":
/*!*******************************************************!*\
  !*** ./node_modules/highlight.js/es/languages/xml.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ xml)\n/* harmony export */ });\n/*\nLanguage: HTML, XML\nWebsite: https://www.w3.org/XML/\nCategory: common, web\nAudit: 2020\n*/ /** @type LanguageFn */ function xml(hljs) {\n    const regex = hljs.regex;\n    // XML names can have the following additional letters: https://www.w3.org/TR/xml/#NT-NameChar\n    // OTHER_NAME_CHARS = /[:\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]/;\n    // Element names start with NAME_START_CHAR followed by optional other Unicode letters, ASCII digits, hyphens, underscores, and periods\n    // const TAG_NAME_RE = regex.concat(/[A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/, regex.optional(/[A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*:/), /[A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*/);;\n    // const XML_IDENT_RE = /[A-Z_a-z:\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]+/;\n    // const TAG_NAME_RE = regex.concat(/[A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/, regex.optional(/[A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*:/), /[A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*/);\n    // however, to cater for performance and more Unicode support rely simply on the Unicode letter class\n    const TAG_NAME_RE = regex.concat(/[\\p{L}_]/u, regex.optional(/[\\p{L}0-9_.-]*:/u), /[\\p{L}0-9_.-]*/u);\n    const XML_IDENT_RE = /[\\p{L}0-9._:-]+/u;\n    const XML_ENTITIES = {\n        className: \"symbol\",\n        begin: /&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/\n    };\n    const XML_META_KEYWORDS = {\n        begin: /\\s/,\n        contains: [\n            {\n                className: \"keyword\",\n                begin: /#?[a-z_][a-z1-9_-]+/,\n                illegal: /\\n/\n            }\n        ]\n    };\n    const XML_META_PAR_KEYWORDS = hljs.inherit(XML_META_KEYWORDS, {\n        begin: /\\(/,\n        end: /\\)/\n    });\n    const APOS_META_STRING_MODE = hljs.inherit(hljs.APOS_STRING_MODE, {\n        className: \"string\"\n    });\n    const QUOTE_META_STRING_MODE = hljs.inherit(hljs.QUOTE_STRING_MODE, {\n        className: \"string\"\n    });\n    const TAG_INTERNALS = {\n        endsWithParent: true,\n        illegal: /</,\n        relevance: 0,\n        contains: [\n            {\n                className: \"attr\",\n                begin: XML_IDENT_RE,\n                relevance: 0\n            },\n            {\n                begin: /=\\s*/,\n                relevance: 0,\n                contains: [\n                    {\n                        className: \"string\",\n                        endsParent: true,\n                        variants: [\n                            {\n                                begin: /\"/,\n                                end: /\"/,\n                                contains: [\n                                    XML_ENTITIES\n                                ]\n                            },\n                            {\n                                begin: /'/,\n                                end: /'/,\n                                contains: [\n                                    XML_ENTITIES\n                                ]\n                            },\n                            {\n                                begin: /[^\\s\"'=<>`]+/\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    };\n    return {\n        name: \"HTML, XML\",\n        aliases: [\n            \"html\",\n            \"xhtml\",\n            \"rss\",\n            \"atom\",\n            \"xjb\",\n            \"xsd\",\n            \"xsl\",\n            \"plist\",\n            \"wsf\",\n            \"svg\"\n        ],\n        case_insensitive: true,\n        unicodeRegex: true,\n        contains: [\n            {\n                className: \"meta\",\n                begin: /<![a-z]/,\n                end: />/,\n                relevance: 10,\n                contains: [\n                    XML_META_KEYWORDS,\n                    QUOTE_META_STRING_MODE,\n                    APOS_META_STRING_MODE,\n                    XML_META_PAR_KEYWORDS,\n                    {\n                        begin: /\\[/,\n                        end: /\\]/,\n                        contains: [\n                            {\n                                className: \"meta\",\n                                begin: /<![a-z]/,\n                                end: />/,\n                                contains: [\n                                    XML_META_KEYWORDS,\n                                    XML_META_PAR_KEYWORDS,\n                                    QUOTE_META_STRING_MODE,\n                                    APOS_META_STRING_MODE\n                                ]\n                            }\n                        ]\n                    }\n                ]\n            },\n            hljs.COMMENT(/<!--/, /-->/, {\n                relevance: 10\n            }),\n            {\n                begin: /<!\\[CDATA\\[/,\n                end: /\\]\\]>/,\n                relevance: 10\n            },\n            XML_ENTITIES,\n            // xml processing instructions\n            {\n                className: \"meta\",\n                end: /\\?>/,\n                variants: [\n                    {\n                        begin: /<\\?xml/,\n                        relevance: 10,\n                        contains: [\n                            QUOTE_META_STRING_MODE\n                        ]\n                    },\n                    {\n                        begin: /<\\?[a-z][a-z0-9]+/\n                    }\n                ]\n            },\n            {\n                className: \"tag\",\n                /*\n        The lookahead pattern (?=...) ensures that 'begin' only matches\n        '<style' as a single word, followed by a whitespace or an\n        ending bracket.\n        */ begin: /<style(?=\\s|>)/,\n                end: />/,\n                keywords: {\n                    name: \"style\"\n                },\n                contains: [\n                    TAG_INTERNALS\n                ],\n                starts: {\n                    end: /<\\/style>/,\n                    returnEnd: true,\n                    subLanguage: [\n                        \"css\",\n                        \"xml\"\n                    ]\n                }\n            },\n            {\n                className: \"tag\",\n                // See the comment in the <style tag about the lookahead pattern\n                begin: /<script(?=\\s|>)/,\n                end: />/,\n                keywords: {\n                    name: \"script\"\n                },\n                contains: [\n                    TAG_INTERNALS\n                ],\n                starts: {\n                    end: /<\\/script>/,\n                    returnEnd: true,\n                    subLanguage: [\n                        \"javascript\",\n                        \"handlebars\",\n                        \"xml\"\n                    ]\n                }\n            },\n            // we need this for now for jSX\n            {\n                className: \"tag\",\n                begin: /<>|<\\/>/\n            },\n            // open tag\n            {\n                className: \"tag\",\n                begin: regex.concat(/</, regex.lookahead(regex.concat(TAG_NAME_RE, // <tag/>\n                // <tag>\n                // <tag ...\n                regex.either(/\\/>/, />/, /\\s/)))),\n                end: /\\/?>/,\n                contains: [\n                    {\n                        className: \"name\",\n                        begin: TAG_NAME_RE,\n                        relevance: 0,\n                        starts: TAG_INTERNALS\n                    }\n                ]\n            },\n            // close tag\n            {\n                className: \"tag\",\n                begin: regex.concat(/<\\//, regex.lookahead(regex.concat(TAG_NAME_RE, />/))),\n                contains: [\n                    {\n                        className: \"name\",\n                        begin: TAG_NAME_RE,\n                        relevance: 0\n                    },\n                    {\n                        begin: />/,\n                        relevance: 0,\n                        endsParent: true\n                    }\n                ]\n            }\n        ]\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight.js/es/languages/xml.js\n");

/***/ })

};
;