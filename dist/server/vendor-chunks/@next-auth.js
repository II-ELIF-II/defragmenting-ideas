"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@next-auth";
exports.ids = ["vendor-chunks/@next-auth"];
exports.modules = {

/***/ "(rsc)/./node_modules/@next-auth/prisma-adapter/dist/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@next-auth/prisma-adapter/dist/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PrismaAdapter = void 0;\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst PrismaAdapter = (prisma)=>{\n    return {\n        async getAdapter ({ session, secret, ...appOptions }) {\n            const sessionMaxAge = session.maxAge * 1000; // default is 30 days\n            const sessionUpdateAge = session.updateAge * 1000; // default is 1 day\n            /**\n             * @todo Move this to core package\n             * @todo Use bcrypt or a more secure method\n             */ const hashToken = (token)=>crypto_1.createHash(\"sha256\").update(`${token}${secret}`).digest(\"hex\");\n            return {\n                displayName: \"PRISMA\",\n                createUser (profile) {\n                    var _a, _b;\n                    return prisma.user.create({\n                        data: {\n                            name: profile.name,\n                            email: profile.email,\n                            image: profile.image,\n                            emailVerified: (_b = (_a = profile.emailVerified) === null || _a === void 0 ? void 0 : _a.toISOString()) !== null && _b !== void 0 ? _b : null,\n                            ...profile\n                        }\n                    });\n                },\n                getUser (id) {\n                    return prisma.user.findUnique({\n                        where: {\n                            id\n                        }\n                    });\n                },\n                getUserByEmail (email) {\n                    if (!email) return Promise.resolve(null);\n                    return prisma.user.findUnique({\n                        where: {\n                            email\n                        }\n                    });\n                },\n                async getUserByProviderAccountId (providerId, providerAccountId) {\n                    var _a;\n                    const account = await prisma.account.findUnique({\n                        where: {\n                            providerId_providerAccountId: {\n                                providerId,\n                                providerAccountId\n                            }\n                        },\n                        select: {\n                            user: true\n                        }\n                    });\n                    return (_a = account === null || account === void 0 ? void 0 : account.user) !== null && _a !== void 0 ? _a : null;\n                },\n                updateUser (user) {\n                    var _a, _b;\n                    return prisma.user.update({\n                        where: {\n                            id: user.id\n                        },\n                        data: {\n                            name: user.name,\n                            email: user.email,\n                            image: user.image,\n                            emailVerified: (_b = (_a = user.emailVerified) === null || _a === void 0 ? void 0 : _a.toISOString()) !== null && _b !== void 0 ? _b : null\n                        }\n                    });\n                },\n                async deleteUser (userId) {\n                    await prisma.user.delete({\n                        where: {\n                            id: userId\n                        }\n                    });\n                },\n                async linkAccount (userId, providerId, providerType, providerAccountId, refreshToken, accessToken, accessTokenExpires) {\n                    await prisma.account.create({\n                        data: {\n                            userId,\n                            providerId,\n                            providerType,\n                            providerAccountId,\n                            refreshToken,\n                            accessToken,\n                            accessTokenExpires\n                        }\n                    });\n                },\n                async unlinkAccount (_, providerId, providerAccountId) {\n                    await prisma.account.delete({\n                        where: {\n                            providerId_providerAccountId: {\n                                providerId,\n                                providerAccountId\n                            }\n                        }\n                    });\n                },\n                createSession (user) {\n                    return prisma.session.create({\n                        data: {\n                            userId: user.id,\n                            expires: new Date(Date.now() + sessionMaxAge),\n                            sessionToken: crypto_1.randomBytes(32).toString(\"hex\"),\n                            accessToken: crypto_1.randomBytes(32).toString(\"hex\")\n                        }\n                    });\n                },\n                async getSession (sessionToken) {\n                    const session = await prisma.session.findUnique({\n                        where: {\n                            sessionToken\n                        }\n                    });\n                    if (session && session.expires < new Date()) {\n                        await prisma.session.delete({\n                            where: {\n                                sessionToken\n                            }\n                        });\n                        return null;\n                    }\n                    return session;\n                },\n                async updateSession (session, force) {\n                    if (!force && Number(session.expires) - sessionMaxAge + sessionUpdateAge > Date.now()) {\n                        return null;\n                    }\n                    return await prisma.session.update({\n                        where: {\n                            id: session.id\n                        },\n                        data: {\n                            expires: new Date(Date.now() + sessionMaxAge)\n                        }\n                    });\n                },\n                async deleteSession (sessionToken) {\n                    await prisma.session.delete({\n                        where: {\n                            sessionToken\n                        }\n                    });\n                },\n                async createVerificationRequest (identifier, url, token, _, provider) {\n                    await prisma.verificationRequest.create({\n                        data: {\n                            identifier,\n                            token: hashToken(token),\n                            expires: new Date(Date.now() + provider.maxAge * 1000)\n                        }\n                    });\n                    await provider.sendVerificationRequest({\n                        identifier,\n                        url,\n                        token,\n                        baseUrl: appOptions.baseUrl,\n                        provider\n                    });\n                },\n                async getVerificationRequest (identifier, token) {\n                    const hashedToken = hashToken(token);\n                    const verificationRequest = await prisma.verificationRequest.findUnique({\n                        where: {\n                            identifier_token: {\n                                identifier,\n                                token: hashedToken\n                            }\n                        }\n                    });\n                    if (verificationRequest && verificationRequest.expires < new Date()) {\n                        await prisma.verificationRequest.delete({\n                            where: {\n                                identifier_token: {\n                                    identifier,\n                                    token: hashedToken\n                                }\n                            }\n                        });\n                        return null;\n                    }\n                    return verificationRequest;\n                },\n                async deleteVerificationRequest (identifier, token) {\n                    await prisma.verificationRequest.delete({\n                        where: {\n                            identifier_token: {\n                                identifier,\n                                token: hashToken(token)\n                            }\n                        }\n                    });\n                }\n            };\n        }\n    };\n};\nexports.PrismaAdapter = PrismaAdapter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG5leHQtYXV0aC9wcmlzbWEtYWRhcHRlci9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxxQkFBcUIsR0FBRyxLQUFLO0FBQzdCLE1BQU1HLFdBQVdDLG1CQUFPQSxDQUFDLHNCQUFRO0FBQ2pDLE1BQU1GLGdCQUFnQixDQUFDRztJQUNuQixPQUFPO1FBQ0gsTUFBTUMsWUFBVyxFQUFFQyxPQUFPLEVBQUVDLE1BQU0sRUFBRSxHQUFHQyxZQUFZO1lBQy9DLE1BQU1DLGdCQUFnQkgsUUFBUUksTUFBTSxHQUFHLE1BQU0scUJBQXFCO1lBQ2xFLE1BQU1DLG1CQUFtQkwsUUFBUU0sU0FBUyxHQUFHLE1BQU0sbUJBQW1CO1lBQ3RFOzs7YUFHQyxHQUNELE1BQU1DLFlBQVksQ0FBQ0MsUUFBVVosU0FBU2EsVUFBVSxDQUFDLFVBQVVDLE1BQU0sQ0FBQyxDQUFDLEVBQUVGLE1BQU0sRUFBRVAsT0FBTyxDQUFDLEVBQUVVLE1BQU0sQ0FBQztZQUM5RixPQUFPO2dCQUNIQyxhQUFhO2dCQUNiQyxZQUFXQyxPQUFPO29CQUNkLElBQUlDLElBQUlDO29CQUNSLE9BQU9sQixPQUFPbUIsSUFBSSxDQUFDQyxNQUFNLENBQUM7d0JBQ3RCQyxNQUFNOzRCQUNGQyxNQUFNTixRQUFRTSxJQUFJOzRCQUNsQkMsT0FBT1AsUUFBUU8sS0FBSzs0QkFDcEJDLE9BQU9SLFFBQVFRLEtBQUs7NEJBQ3BCQyxlQUFlLENBQUNQLEtBQUssQ0FBQ0QsS0FBS0QsUUFBUVMsYUFBYSxNQUFNLFFBQVFSLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR1MsV0FBVyxFQUFDLE1BQU8sUUFBUVIsT0FBTyxLQUFLLElBQUlBLEtBQUs7NEJBQzFJLEdBQUdGLE9BQU87d0JBQ2Q7b0JBQ0o7Z0JBQ0o7Z0JBQ0FXLFNBQVFDLEVBQUU7b0JBQ04sT0FBTzVCLE9BQU9tQixJ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eUQsc0JBQXNCLE1BQU1uRSxPQUFPbUUsbUJBQW1CLENBQUN0QyxVQUFVLENBQUM7d0JBQ3BFQyxPQUFPOzRCQUFFMEMsa0JBQWtCO2dDQUFFUjtnQ0FBWXRELE9BQU82RDs0QkFBWTt3QkFBRTtvQkFDbEU7b0JBQ0EsSUFBSUosdUJBQXVCQSxvQkFBb0JmLE9BQU8sR0FBRyxJQUFJQyxRQUFRO3dCQUNqRSxNQUFNckQsT0FBT21FLG1CQUFtQixDQUFDeEIsTUFBTSxDQUFDOzRCQUNwQ2IsT0FBTztnQ0FBRTBDLGtCQUFrQjtvQ0FBRVI7b0NBQVl0RCxPQUFPNkQ7Z0NBQVk7NEJBQUU7d0JBQ2xFO3dCQUNBLE9BQU87b0JBQ1g7b0JBQ0EsT0FBT0o7Z0JBQ1g7Z0JBQ0EsTUFBTU0sMkJBQTBCVCxVQUFVLEVBQUV0RCxLQUFLO29CQUM3QyxNQUFNVixPQUFPbUUsbUJBQW1CLENBQUN4QixNQUFNLENBQUM7d0JBQ3BDYixPQUFPOzRCQUNIMEMsa0JBQWtCO2dDQUFFUjtnQ0FBWXRELE9BQU9ELFVBQVVDOzRCQUFPO3dCQUM1RDtvQkFDSjtnQkFDSjtZQUNKO1FBQ0o7SUFDSjtBQUNKO0FBQ0FmLHFCQUFxQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2RlZnJhZ21lbnRpbmctaWRlYXMvLi9ub2RlX21vZHVsZXMvQG5leHQtYXV0aC9wcmlzbWEtYWRhcHRlci9kaXN0L2luZGV4LmpzPzMxYTgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlByaXNtYUFkYXB0ZXIgPSB2b2lkIDA7XG5jb25zdCBjcnlwdG9fMSA9IHJlcXVpcmUoXCJjcnlwdG9cIik7XG5jb25zdCBQcmlzbWFBZGFwdGVyID0gKHByaXNtYSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIGFzeW5jIGdldEFkYXB0ZXIoeyBzZXNzaW9uLCBzZWNyZXQsIC4uLmFwcE9wdGlvbnMgfSkge1xuICAgICAgICAgICAgY29uc3Qgc2Vzc2lvbk1heEFnZSA9IHNlc3Npb24ubWF4QWdlICogMTAwMDsgLy8gZGVmYXVsdCBpcyAzMCBkYXlzXG4gICAgICAgICAgICBjb25zdCBzZXNzaW9uVXBkYXRlQWdlID0gc2Vzc2lvbi51cGRhdGVBZ2UgKiAxMDAwOyAvLyBkZWZhdWx0IGlzIDEgZGF5XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEB0b2RvIE1vdmUgdGhpcyB0byBjb3JlIHBhY2thZ2VcbiAgICAgICAgICAgICAqIEB0b2RvIFVzZSBiY3J5cHQgb3IgYSBtb3JlIHNlY3VyZSBtZXRob2RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3QgaGFzaFRva2VuID0gKHRva2VuKSA9PiBjcnlwdG9fMS5jcmVhdGVIYXNoKFwic2hhMjU2XCIpLnVwZGF0ZShgJHt0b2tlbn0ke3NlY3JldH1gKS5kaWdlc3QoXCJoZXhcIik7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lOiBcIlBSSVNNQVwiLFxuICAgICAgICAgICAgICAgIGNyZWF0ZVVzZXIocHJvZmlsZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJpc21hLnVzZXIuY3JlYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBwcm9maWxlLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1haWw6IHByb2ZpbGUuZW1haWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2U6IHByb2ZpbGUuaW1hZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1haWxWZXJpZmllZDogKF9iID0gKF9hID0gcHJvZmlsZS5lbWFpbFZlcmlmaWVkKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudG9JU09TdHJpbmcoKSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5wcm9maWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnZXRVc2VyKGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcmlzbWEudXNlci5maW5kVW5pcXVlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoZXJlOiB7IGlkIH0sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0VXNlckJ5RW1haWwoZW1haWwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlbWFpbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcmlzbWEudXNlci5maW5kVW5pcXVlKHsgd2hlcmU6IHsgZW1haWwgfSB9KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFzeW5jIGdldFVzZXJCeVByb3ZpZGVyQWNjb3VudElkKHByb3ZpZGVySWQsIHByb3ZpZGVyQWNjb3VudElkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWNjb3VudCA9IGF3YWl0IHByaXNtYS5hY2NvdW50LmZpbmRVbmlxdWUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hlcmU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlcklkX3Byb3ZpZGVyQWNjb3VudElkOiB7IHByb3ZpZGVySWQsIHByb3ZpZGVyQWNjb3VudElkIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0OiB7IHVzZXI6IHRydWUgfSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoX2EgPSBhY2NvdW50ID09PSBudWxsIHx8IGFjY291bnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFjY291bnQudXNlcikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogbnVsbDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHVwZGF0ZVVzZXIodXNlcikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJpc21hLnVzZXIudXBkYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoZXJlOiB7IGlkOiB1c2VyLmlkIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdXNlci5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsOiB1c2VyLmVtYWlsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlOiB1c2VyLmltYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsVmVyaWZpZWQ6IChfYiA9IChfYSA9IHVzZXIuZW1haWxWZXJpZmllZCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRvSVNPU3RyaW5nKCkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFzeW5jIGRlbGV0ZVVzZXIodXNlcklkKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHByaXNtYS51c2VyLmRlbGV0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGVyZTogeyBpZDogdXNlcklkIH0sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYXN5bmMgbGlua0FjY291bnQodXNlcklkLCBwcm92aWRlcklkLCBwcm92aWRlclR5cGUsIHByb3ZpZGVyQWNjb3VudElkLCByZWZyZXNoVG9rZW4sIGFjY2Vzc1Rva2VuLCBhY2Nlc3NUb2tlbkV4cGlyZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgcHJpc21hLmFjY291bnQuY3JlYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VySWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlclR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJBY2NvdW50SWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFRva2VuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc1Rva2VuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc1Rva2VuRXhwaXJlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYXN5bmMgdW5saW5rQWNjb3VudChfLCBwcm92aWRlcklkLCBwcm92aWRlckFjY291bnRJZCkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBwcmlzbWEuYWNjb3VudC5kZWxldGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hlcmU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlcklkX3Byb3ZpZGVyQWNjb3VudElkOiB7IHByb3ZpZGVySWQsIHByb3ZpZGVyQWNjb3VudElkIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNyZWF0ZVNlc3Npb24odXNlcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJpc21hLnNlc3Npb24uY3JlYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VySWQ6IHVzZXIuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwaXJlczogbmV3IERhdGUoRGF0ZS5ub3coKSArIHNlc3Npb25NYXhBZ2UpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb25Ub2tlbjogY3J5cHRvXzEucmFuZG9tQnl0ZXMoMzIpLnRvU3RyaW5nKFwiaGV4XCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc1Rva2VuOiBjcnlwdG9fMS5yYW5kb21CeXRlcygzMikudG9TdHJpbmcoXCJoZXhcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFzeW5jIGdldFNlc3Npb24oc2Vzc2lvblRva2VuKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlc3Npb24gPSBhd2FpdCBwcmlzbWEuc2Vzc2lvbi5maW5kVW5pcXVlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoZXJlOiB7IHNlc3Npb25Ub2tlbiB9LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlc3Npb24gJiYgc2Vzc2lvbi5leHBpcmVzIDwgbmV3IERhdGUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgcHJpc21hLnNlc3Npb24uZGVsZXRlKHsgd2hlcmU6IHsgc2Vzc2lvblRva2VuIH0gfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2Vzc2lvbjtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFzeW5jIHVwZGF0ZVNlc3Npb24oc2Vzc2lvbiwgZm9yY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFmb3JjZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgTnVtYmVyKHNlc3Npb24uZXhwaXJlcykgLSBzZXNzaW9uTWF4QWdlICsgc2Vzc2lvblVwZGF0ZUFnZSA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRGF0ZS5ub3coKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHByaXNtYS5zZXNzaW9uLnVwZGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGVyZTogeyBpZDogc2Vzc2lvbi5pZCB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGlyZXM6IG5ldyBEYXRlKERhdGUubm93KCkgKyBzZXNzaW9uTWF4QWdlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYXN5bmMgZGVsZXRlU2Vzc2lvbihzZXNzaW9uVG9rZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgcHJpc21hLnNlc3Npb24uZGVsZXRlKHsgd2hlcmU6IHsgc2Vzc2lvblRva2VuIH0gfSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhc3luYyBjcmVhdGVWZXJpZmljYXRpb25SZXF1ZXN0KGlkZW50aWZpZXIsIHVybCwgdG9rZW4sIF8sIHByb3ZpZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHByaXNtYS52ZXJpZmljYXRpb25SZXF1ZXN0LmNyZWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRlbnRpZmllcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2tlbjogaGFzaFRva2VuKHRva2VuKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBpcmVzOiBuZXcgRGF0ZShEYXRlLm5vdygpICsgcHJvdmlkZXIubWF4QWdlICogMTAwMCksXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgcHJvdmlkZXIuc2VuZFZlcmlmaWNhdGlvblJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWRlbnRpZmllcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuLFxuICAgICAgICAgICAgICAgICAgICAgICAgYmFzZVVybDogYXBwT3B0aW9ucy5iYXNlVXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXIsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYXN5bmMgZ2V0VmVyaWZpY2F0aW9uUmVxdWVzdChpZGVudGlmaWVyLCB0b2tlbikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBoYXNoZWRUb2tlbiA9IGhhc2hUb2tlbih0b2tlbik7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZlcmlmaWNhdGlvblJlcXVlc3QgPSBhd2FpdCBwcmlzbWEudmVyaWZpY2F0aW9uUmVxdWVzdC5maW5kVW5pcXVlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoZXJlOiB7IGlkZW50aWZpZXJfdG9rZW46IHsgaWRlbnRpZmllciwgdG9rZW46IGhhc2hlZFRva2VuIH0gfSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2ZXJpZmljYXRpb25SZXF1ZXN0ICYmIHZlcmlmaWNhdGlvblJlcXVlc3QuZXhwaXJlcyA8IG5ldyBEYXRlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHByaXNtYS52ZXJpZmljYXRpb25SZXF1ZXN0LmRlbGV0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlcmU6IHsgaWRlbnRpZmllcl90b2tlbjogeyBpZGVudGlmaWVyLCB0b2tlbjogaGFzaGVkVG9rZW4gfSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmVyaWZpY2F0aW9uUmVxdWVzdDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFzeW5jIGRlbGV0ZVZlcmlmaWNhdGlvblJlcXVlc3QoaWRlbnRpZmllciwgdG9rZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgcHJpc21hLnZlcmlmaWNhdGlvblJlcXVlc3QuZGVsZXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoZXJlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRlbnRpZmllcl90b2tlbjogeyBpZGVudGlmaWVyLCB0b2tlbjogaGFzaFRva2VuKHRva2VuKSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgfTtcbn07XG5leHBvcnRzLlByaXNtYUFkYXB0ZXIgPSBQcmlzbWFBZGFwdGVyO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiUHJpc21hQWRhcHRlciIsImNyeXB0b18xIiwicmVxdWlyZSIsInByaXNtYSIsImdldEFkYXB0ZXIiLCJzZXNzaW9uIiwic2VjcmV0IiwiYXBwT3B0aW9ucyIsInNlc3Npb25NYXhBZ2UiLCJtYXhBZ2UiLCJzZXNzaW9uVXBkYXRlQWdlIiwidXBkYXRlQWdlIiwiaGFzaFRva2VuIiwidG9rZW4iLCJjcmVhdGVIYXNoIiwidXBkYXRlIiwiZGlnZXN0IiwiZGlzcGxheU5hbWUiLCJjcmVhdGVVc2VyIiwicHJvZmlsZSIsIl9hIiwiX2IiLCJ1c2VyIiwiY3JlYXRlIiwiZGF0YSIsIm5hbWUiLCJlbWFpbCIsImltYWdlIiwiZW1haWxWZXJpZmllZCIsInRvSVNPU3RyaW5nIiwiZ2V0VXNlciIsImlkIiwiZmluZFVuaXF1ZSIsIndoZXJlIiwiZ2V0VXNlckJ5RW1haWwiLCJQcm9taXNlIiwicmVzb2x2ZSIsImdldFVzZXJCeVByb3ZpZGVyQWNjb3VudElkIiwicHJvdmlkZXJJZCIsInByb3ZpZGVyQWNjb3VudElkIiwiYWNjb3VudCIsInByb3ZpZGVySWRfcHJvdmlkZXJBY2NvdW50SWQiLCJzZWxlY3QiLCJ1cGRhdGVVc2VyIiwiZGVsZXRlVXNlciIsInVzZXJJZCIsImRlbGV0ZSIsImxpbmtBY2NvdW50IiwicHJvdmlkZXJUeXBlIiwicmVmcmVzaFRva2VuIiwiYWNjZXNzVG9rZW4iLCJhY2Nlc3NUb2tlbkV4cGlyZXMiLCJ1bmxpbmtBY2NvdW50IiwiXyIsImNyZWF0ZVNlc3Npb24iLCJleHBpcmVzIiwiRGF0ZSIsIm5vdyIsInNlc3Npb25Ub2tlbiIsInJhbmRvbUJ5dGVzIiwidG9TdHJpbmciLCJnZXRTZXNzaW9uIiwidXBkYXRlU2Vzc2lvbiIsImZvcmNlIiwiTnVtYmVyIiwiZGVsZXRlU2Vzc2lvbiIsImNyZWF0ZVZlcmlmaWNhdGlvblJlcXVlc3QiLCJpZGVudGlmaWVyIiwidXJsIiwicHJvdmlkZXIiLCJ2ZXJpZmljYXRpb25SZXF1ZXN0Iiwic2VuZFZlcmlmaWNhdGlvblJlcXVlc3QiLCJiYXNlVXJsIiwiZ2V0VmVyaWZpY2F0aW9uUmVxdWVzdCIsImhhc2hlZFRva2VuIiwiaWRlbnRpZmllcl90b2tlbiIsImRlbGV0ZVZlcmlmaWNhdGlvblJlcXVlc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@next-auth/prisma-adapter/dist/index.js\n");

/***/ })

};
;